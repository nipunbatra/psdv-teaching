---
title: "Prerequisite"
---

# Prerequisite Questions for Probability, Statistics, and Data Visualization

Instructions:

- Solve the following questions to assess your understanding of Python basics, data structures, and statistics.
- Create a single Juptyer notebook with solutions to all questions.
- Include output for each code cell.
- Add explanations and comments to your code where necessary using Markdown cells.
- DO NOT cheat or copy solutions from the internet. The purpose of this exercise is to evaluate your current knowledge and skills and to help you prepare for the course.

## Python Basics, Lists, Strings, Dictionaries, File Handling, Statistics, and Flow Control

1. **List Operations and Basic Statistics:**
   - Create a list of the first 20 natural numbers.
   - Compute the sum of all even numbers in the list.
   - Compute the product of all odd numbers in the list.
   - Calculate the mean, median, and standard deviation of the list.

2. **Mutable vs. Immutable Data Types:**
   - Explain the difference between mutable and immutable data types in Python. Provide examples of each.

3. **Fibonacci Sequence:**
   - Write a Python function that takes a number `n` and returns a list of the first `n` Fibonacci numbers.
   - Plot the Fibonacci sequence using a line graph.

4. **List Manipulation:**
   - Given a list `[3, 5, 7, 9, 11, 13]`:
     - Insert `6` at the 3rd index.
     - Remove the number `7` from the list.
     - Reverse the list.
     - Calculate the mean and median of the modified list.

5. **User Input and Basic Statistics:**
   - Write a program to read a comma-separated list of numbers from the user (e.g., "10, 20, 30, 40").
   - Calculate the mean of the numbers.
   - Identify and print the smallest and largest numbers.
   - Plot a histogram of the numbers.

6. **Palindrome Check:**
   - Write a program to check if a string is a palindrome (ignoring spaces and case).
   - Input: `"A man a plan a canal Panama"`
   - Output: `True`

7. **Dictionary Operations:**
   - Create a dictionary of student names (keys) and their marks (values).
   - Compute the average marks.
   - Print the names of students scoring above the average.
   - Visualize the distribution of marks using a bar chart.

8. **Tuple List Creation:**
   - Create a list of tuples, where each tuple contains a number and its square (e.g., `[(1, 1), (2, 4), (3, 9), ...]` for numbers 1 to 10).
   - Plot the numbers and their squares on a scatter plot.

9. **Merging Dictionaries:**
   - Write Python code to merge two dictionaries. If a key is present in both, sum their values.
   - Example:
     ```python
     dict1 = {'a': 10, 'b': 20}
     dict2 = {'b': 5, 'c': 15}
     Output: {'a': 10, 'b': 25, 'c': 15}
     ```

10. **Character Frequency:**
    - Write a function that accepts a string and:
      - Converts all characters to lowercase.
      - Counts the frequency of each character.
      - Returns a dictionary with characters as keys and their counts as values.
      - Visualize the character frequencies using a bar chart.

11. **Remove Duplicates:**
    - Write a program to remove duplicate elements from a list while maintaining the order of elements.
    - Calculate the mean and median of the unique elements.

12. **String Operations:**
    - Given a list of strings, write a Python function to:
      - Find the longest string.
      - Count how many strings start with a vowel.
      - Visualize the distribution of string lengths using a histogram.

13. **Sorting Dictionaries:**
    - Write a function to sort a list of dictionaries by a key.
    - Example:
      ```python
      data = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 22}]
      Sort by age â†’ [{'name': 'Bob', 'age': 22}, {'name': 'Alice', 'age': 25}]
      ```

14. **Word Filtering and Sorting:**
    - Write a program to:
      - Split a string into a list of words.
      - Remove all words that are shorter than 4 characters.
      - Sort the remaining words alphabetically.
      - Visualize the word lengths using a bar chart.

15. **Anagram Finder:**
    - Write a Python function to find all anagrams of a word in a given list.
    - Input: `word = "listen", words = ["enlist", "google", "inlets", "banana"]`
    - Output: `["enlist", "inlets"]`

16. **Set Operations:**
    - Given two lists, write Python code to find their intersection, union, and symmetric difference.
    - Visualize the results using Venn diagrams.

17. **File Operations:**
    - Write Python code to:
      - Create a text file.
      - Write a list of numbers to the file (one per line).
      - Read the file and compute their sum.

18. **Word Count and Frequency:**
    - Write a program to:
      - Read a file and count the number of words in it.
      - Find the most frequent word.
      - Visualize the word frequencies using a bar chart.

19. **Random Number Generation:**
    - Write a Python program to:
      - Generate 100 random integers between 1 and 50.
      - Save them in a text file, one per line.
      - Read the file and compute the mean of the numbers.
      - Visualize the distribution of the numbers using a histogram.

20. **CSV File Operations:**
    - Write Python code to read a CSV file and compute the sum of values in a specific column.
    - Visualize the data using a line plot.

21. **Basic Statistics:**
    - Write Python code to calculate:
      - Mean, median, mode, and standard deviation of a list of numbers.
      - Visualize the data using a box plot.

22. **Normalization:**
    - Write a Python function to normalize a list of numbers to a range of 0 to 1.
    - Visualize the normalized data using a line plot.

23. **Even or Odd:**
    - Write a Python program that takes an integer input from the user and prints whether the number is even or odd.

24. **Grade Calculator:**
    - Write a Python program that takes a numerical grade (0-100) as input and prints the corresponding letter grade (A, B, C, D, F).

25. **Leap Year Checker:**
    - Write a Python program that takes a year as input and checks if it is a leap year.

