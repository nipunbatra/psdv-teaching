[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This webpage contains the course materials for the course “PSDV” that I (Nipun Batra) teach at Indian Institute of Technology, Gandhinagar. These materials have been developed over several years by me and excellent teaching assistants who have helped me in teaching this course."
  },
  {
    "objectID": "notebooks/set.html",
    "href": "notebooks/set.html",
    "title": "Set",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nSet_A = set([1,2,3,4,5,6,7,8,9,10])\nSet_B = set([2,4,6,8,10])\n\n# Union\nUnion = Set_A.union(Set_B)\nprint('Union:', Union)\n\nUnion: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n\n\n# Intersection\nIntersection = Set_A.intersection(Set_B)\nprint('Intersection:', Intersection)\n\nIntersection: {2, 4, 6, 8, 10}\n\n\n\n# Difference\nDifference = Set_A.difference(Set_B)\nprint('Difference:', Difference)\n\nDifference: {1, 3, 5, 7, 9}\n\n\n\nSet_B.difference(Set_A)\n\nset()\n\n\n\nSet_A.issubset(Set_B)\n\nFalse\n\n\n\nSet_B.issubset(Set_A)\n\nTrue\n\n\n\ndef is_subset(set_a, set_b):\n    \"\"\"\n    set_a: set\n    set_b: set\n    ---\n    return: True if set_a is a subset of set_b, False otherwise\n    \"\"\"\n    assert isinstance(set_a, set), 'set_a must be a set'\n    assert isinstance(set_b, set), 'set_b must be a set'\n    \n    # Loop through all elements in set_a and check if they are in set_b\n    subset = True\n    for element in set_a:\n        if element in set_b:\n            continue\n        else:\n            subset = False\n            break\n    return subset\n\n\nis_subset(Set_A, Set_B)\n\nFalse\n\n\n\nis_subset(Set_B, Set_A)\n\nTrue"
  },
  {
    "objectID": "notebooks.html",
    "href": "notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "Set\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nDec 7, 2024\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Variables\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nDec 5, 2024\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "notebooks/random-variables.html",
    "href": "notebooks/random-variables.html",
    "title": "Random Variables",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\n# Sample space for flipping a coin 2 times\nsample_space = [\"HH\", \"HT\", \"TH\", \"TT\"]\n\n\n# Define a random variable X as the number of Heads in the outcomes\ndef random_variable_X(outcome):\n    return outcome.count(\"H\")\n\n\nrandom_variable_X(\"HT\"), random_variable_X(\"TT\"), random_variable_X(\"HH\"), random_variable_X(\"TH\")\n\n(1, 0, 2, 1)\n\n\n\n# Mapping of outcomes to the random variable values\nmapping = {outcome: random_variable_X(outcome) for outcome in sample_space}\n\n\nmapping\n\n{'HH': 2, 'HT': 1, 'TH': 1, 'TT': 0}\n\n\n\ndf = pd.DataFrame(mapping, index=[\"X\"]).T\ndf.index.name = \"Outcome\"\ndf\n\n\n\n\n\n\n\n\nX\n\n\nOutcome\n\n\n\n\n\nHH\n2\n\n\nHT\n1\n\n\nTH\n1\n\n\nTT\n0\n\n\n\n\n\n\n\n\n# Find records/samples where X = 1\ndf[\"X\"] == 1\n\nOutcome\nHH    False\nHT     True\nTH     True\nTT    False\nName: X, dtype: bool\n\n\n\ndf[df[\"X\"] == 1]\n\n\n\n\n\n\n\n\nX\n\n\nOutcome\n\n\n\n\n\nHT\n1\n\n\nTH\n1\n\n\n\n\n\n\n\n\n# Calculate probabilities for X = 0, 1, 2\n\ndef calculate_probability_X(x, df):\n    subset = df[df[\"X\"] == x]\n    len_subset = len(subset)\n    len_df = len(df)\n    return len_subset / len_df\n\n\ncalculate_probability_X(0, df), calculate_probability_X(1, df), calculate_probability_X(2, df)\n\n(0.25, 0.5, 0.25)\n\n\n\n# Store inverse mapping\n\ninverse_mapping = {x: [] for x in range(3)}\nfor outcome, value in mapping.items():\n    inverse_mapping[value].append(outcome)\n    \nprint(inverse_mapping)\n\n{0: ['TT'], 1: ['HT', 'TH'], 2: ['HH']}\n\n\n\ndef calculate_probability_X(x, inverse_mapping):\n    outcomes = inverse_mapping[x]\n    len_outcomes = len(outcomes)\n    len_sample_space = len(sample_space)\n    return len_outcomes / len_sample_space\n\ncalculate_probability_X(0, inverse_mapping), calculate_probability_X(1, inverse_mapping), calculate_probability_X(2, inverse_mapping)\n\n(0.25, 0.5, 0.25)\n\n\n\n### Two dice example\n\n# Construct the sample space\n\nsample_space = [(i, j) for i in range(1, 7) for j in range(1, 7)]\nprint(sample_space)\n\n[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)]\n\n\n\n# Define a random variable X1 as the sum of the outcomes\n# Define a random variable X2 as the product of the outcomes\n# Define a random variable X3 as the maximum of the outcomes\n\ndef random_variable_X1(outcome):\n    return sum(outcome)\n\ndef random_variable_X2(outcome):\n    return outcome[0] * outcome[1]\n\ndef random_variable_X3(outcome):\n    return max(outcome)\n\n\nrandom_variable_X1([1, 2])\n\n3\n\n\n\n# Create a heatmap for the sum of the outcomes\ndf = pd.DataFrame(sample_space, columns=[\"D1\", \"D2\"])\n\ndf[\"X1\"] = df.apply(lambda row: random_variable_X1(row), axis=1)\ndf.index.name = \"Serial No.\"\n\n\ndf[df[\"X1\"] == 10]\n\n\n\n\n\n\n\n\nD1\nD2\nX1\n\n\nSerial No.\n\n\n\n\n\n\n\n23\n4\n6\n10\n\n\n28\n5\n5\n10\n\n\n33\n6\n4\n10\n\n\n\n\n\n\n\n\n# Create interactive ipywidgets for the sum of the outcomes\nimport ipywidgets as widgets\nfrom ipywidgets import interact\n\n@interact(x=widgets.IntSlider(min=2, max=12, step=1, value=7))\ndef show_samples(x):\n    return df[df[\"X1\"] == x]"
  }
]