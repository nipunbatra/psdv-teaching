[
  {
    "objectID": "notebooks.html",
    "href": "notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "Introduction To Matplotlib\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Pandas\n\n\n\n\n\n\n\n\n\n\n\nJan 13, 2025\n\n\nNipun Batra, Shreyans Jain, Guntas Singh Saran\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to NumPy\n\n\n\n\n\n\n\n\n\n\n\nJan 7, 2025\n\n\nNipun Batra, Shreyans Jain\n\n\n\n\n\n\n\n\n\n\n\n\nInroduction\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nJan 5, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nSet\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nDec 7, 2024\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Variables\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nDec 5, 2024\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/random-variables.html",
    "href": "notebooks/random-variables.html",
    "title": "Random Variables",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\n# Sample space for flipping a coin 2 times\nsample_space = [\"HH\", \"HT\", \"TH\", \"TT\"]\n\n\n# Define a random variable X as the number of Heads in the outcomes\ndef random_variable_X(outcome):\n    return outcome.count(\"H\")\n\n\nrandom_variable_X(\"HT\"), random_variable_X(\"TT\"), random_variable_X(\"HH\"), random_variable_X(\"TH\")\n\n(1, 0, 2, 1)\n\n\n\n# Mapping of outcomes to the random variable values\nmapping = {outcome: random_variable_X(outcome) for outcome in sample_space}\n\n\nmapping\n\n{'HH': 2, 'HT': 1, 'TH': 1, 'TT': 0}\n\n\n\ndf = pd.DataFrame(mapping, index=[\"X\"]).T\ndf.index.name = \"Outcome\"\ndf\n\n\n\n\n\n\n\n\nX\n\n\nOutcome\n\n\n\n\n\nHH\n2\n\n\nHT\n1\n\n\nTH\n1\n\n\nTT\n0\n\n\n\n\n\n\n\n\n# Find records/samples where X = 1\ndf[\"X\"] == 1\n\nOutcome\nHH    False\nHT     True\nTH     True\nTT    False\nName: X, dtype: bool\n\n\n\ndf[df[\"X\"] == 1]\n\n\n\n\n\n\n\n\nX\n\n\nOutcome\n\n\n\n\n\nHT\n1\n\n\nTH\n1\n\n\n\n\n\n\n\n\n# Calculate probabilities for X = 0, 1, 2\n\ndef calculate_probability_X(x, df):\n    subset = df[df[\"X\"] == x]\n    len_subset = len(subset)\n    len_df = len(df)\n    return len_subset / len_df\n\n\ncalculate_probability_X(0, df), calculate_probability_X(1, df), calculate_probability_X(2, df)\n\n(0.25, 0.5, 0.25)\n\n\n\n# Store inverse mapping\n\ninverse_mapping = {x: [] for x in range(3)}\nfor outcome, value in mapping.items():\n    inverse_mapping[value].append(outcome)\n    \nprint(inverse_mapping)\n\n{0: ['TT'], 1: ['HT', 'TH'], 2: ['HH']}\n\n\n\ndef calculate_probability_X(x, inverse_mapping):\n    outcomes = inverse_mapping[x]\n    len_outcomes = len(outcomes)\n    len_sample_space = len(sample_space)\n    return len_outcomes / len_sample_space\n\ncalculate_probability_X(0, inverse_mapping), calculate_probability_X(1, inverse_mapping), calculate_probability_X(2, inverse_mapping)\n\n(0.25, 0.5, 0.25)\n\n\n\n### Two dice example\n\n# Construct the sample space\n\nsample_space = [(i, j) for i in range(1, 7) for j in range(1, 7)]\nprint(sample_space)\n\n[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)]\n\n\n\n# Define a random variable X1 as the sum of the outcomes\n# Define a random variable X2 as the product of the outcomes\n# Define a random variable X3 as the maximum of the outcomes\n\ndef random_variable_X1(outcome):\n    return sum(outcome)\n\ndef random_variable_X2(outcome):\n    return outcome[0] * outcome[1]\n\ndef random_variable_X3(outcome):\n    return max(outcome)\n\n\nrandom_variable_X1([1, 2])\n\n3\n\n\n\n# Create a heatmap for the sum of the outcomes\ndf = pd.DataFrame(sample_space, columns=[\"D1\", \"D2\"])\n\ndf[\"X1\"] = df.apply(lambda row: random_variable_X1(row), axis=1)\ndf.index.name = \"Serial No.\"\n\n\ndf[df[\"X1\"] == 10]\n\n\n\n\n\n\n\n\nD1\nD2\nX1\n\n\nSerial No.\n\n\n\n\n\n\n\n23\n4\n6\n10\n\n\n28\n5\n5\n10\n\n\n33\n6\n4\n10\n\n\n\n\n\n\n\n\n# Create interactive ipywidgets for the sum of the outcomes\nimport ipywidgets as widgets\nfrom ipywidgets import interact\n\n@interact(x=widgets.IntSlider(min=2, max=12, step=1, value=7))\ndef show_samples(x):\n    return df[df[\"X1\"] == x]"
  },
  {
    "objectID": "notebooks/introduction-pandas.html",
    "href": "notebooks/introduction-pandas.html",
    "title": "Introduction to Pandas",
    "section": "",
    "text": "## 1. Introduction\nPandas is a powerful Python library for data manipulation, offering labeled data structures that make tasks like cleaning, transformation, merging, and analysis more convenient.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nprint(\"Using Pandas version:\", pd.__version__)\nprint(\"Using NumPy version:\", np.__version__)\nprint(\"Using Seaborn version:\", sns.__version__)\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nUsing Pandas version: 2.2.3\nUsing NumPy version: 2.1.2\nUsing Seaborn version: 0.13.2"
  },
  {
    "objectID": "notebooks/introduction-pandas.html#numpy-vs.-pandas-for-student-scores",
    "href": "notebooks/introduction-pandas.html#numpy-vs.-pandas-for-student-scores",
    "title": "Introduction to Pandas",
    "section": "2. Numpy vs. Pandas for Student Scores",
    "text": "2. Numpy vs. Pandas for Student Scores\n\n2.1 Creating and Saving Student Data to Excel/CSV\nWe’ll first generate some random student data: - Name (string) - Maths (integer) - Science (integer)\nThen we’ll save to both .xlsx and .csv for demonstration.\n\nnum_students = 20\n\nstudent_data = {\n    \"Name\": [\n        \"Aarav\", \"Vivaan\", \"Aditya\", \"Ananya\", \"Ishita\", \"Kabir\", \"Nisha\", \"Rohan\", \"Priya\", \"Sneha\",\n        \"Aryan\", \"Meera\", \"Tanya\", \"Siddharth\", \"Neha\", \"Laksh\", \"Pooja\", \"Rahul\", \"Simran\", \"Kiran\"\n    ],\n    \"Maths\": np.random.randint(50, 100, size=num_students),\n    \"Science\": np.random.randint(50, 100, size=num_students),\n    \"Economics\": np.random.randint(50, 100, size=num_students),\n}\n\ndf_students = pd.DataFrame(student_data)\n\ndf_students.to_excel(\"student_scores.xlsx\", index=False)\ndf_students.to_csv(\"student_scores.csv\", index=False)\n\ndf_students.head(10)\n\n\n\n\n\n\n\n\nName\nMaths\nScience\nEconomics\n\n\n\n\n0\nAarav\n53\n56\n67\n\n\n1\nVivaan\n94\n88\n85\n\n\n2\nAditya\n84\n65\n69\n\n\n3\nAnanya\n98\n90\n96\n\n\n4\nIshita\n72\n74\n78\n\n\n5\nKabir\n79\n56\n60\n\n\n6\nNisha\n76\n52\n99\n\n\n7\nRohan\n71\n78\n50\n\n\n8\nPriya\n76\n72\n68\n\n\n9\nSneha\n64\n92\n94\n\n\n\n\n\n\n\n\n\n2.2 Reading CSV in NumPy & Basic Analysis\nNumPy’s loadtxt can be used to read numeric data easily, but handling mixed types (e.g. strings + numbers) can be trickier. We’ll demonstrate a simple approach:\n\nRead the entire CSV (skipping the header) using np.loadtxt.\nWe’ll parse the Name column as a string and the three score columns as integers.\nCompute the mean of Maths and Science.\nFind which student got the maximum in Science.\nFind which student got the maximum of |Maths - Science|.\n\n\n!head student_scores.csv\n\nName,Maths,Science,Economics\nAarav,53,56,67\nVivaan,94,88,85\nAditya,84,65,69\nAnanya,98,90,96\nIshita,72,74,78\nKabir,79,56,60\nNisha,76,52,99\nRohan,71,78,50\nPriya,76,72,68\n\n\n\ndata = np.loadtxt(\"student_scores.csv\", delimiter = \",\", skiprows = 1, dtype = str)\nprint(data)\n\n[['Aarav' '53' '56' '67']\n ['Vivaan' '94' '88' '85']\n ['Aditya' '84' '65' '69']\n ['Ananya' '98' '90' '96']\n ['Ishita' '72' '74' '78']\n ['Kabir' '79' '56' '60']\n ['Nisha' '76' '52' '99']\n ['Rohan' '71' '78' '50']\n ['Priya' '76' '72' '68']\n ['Sneha' '64' '92' '94']\n ['Aryan' '60' '92' '97']\n ['Meera' '62' '56' '89']\n ['Tanya' '70' '78' '88']\n ['Siddharth' '73' '72' '83']\n ['Neha' '79' '85' '95']\n ['Laksh' '68' '62' '88']\n ['Pooja' '63' '62' '57']\n ['Rahul' '81' '63' '67']\n ['Simran' '69' '98' '78']\n ['Kiran' '85' '82' '95']]\n\n\n\nprint(data.dtype)\n\n&lt;U9\n\n\n\nnames = data[:, 0].tolist()\nmaths_np = np.array(data[:, 1].astype(int))\nscience_np = np.array(data[:, 2].astype(int))\neco_np = np.array(data[:, 3].astype(int))\n\nprint(\"Names:\", names)\nprint(\"Maths scores:\", maths_np)\nprint(\"Science scores:\", science_np)\nprint(\"Economics scores:\", eco_np)\n\nNames: ['Aarav', 'Vivaan', 'Aditya', 'Ananya', 'Ishita', 'Kabir', 'Nisha', 'Rohan', 'Priya', 'Sneha', 'Aryan', 'Meera', 'Tanya', 'Siddharth', 'Neha', 'Laksh', 'Pooja', 'Rahul', 'Simran', 'Kiran']\nMaths scores: [53 94 84 98 72 79 76 71 76 64 60 62 70 73 79 68 63 81 69 85]\nScience scores: [56 88 65 90 74 56 52 78 72 92 92 56 78 72 85 62 62 63 98 82]\nEconomics scores: [67 85 69 96 78 60 99 50 68 94 97 89 88 83 95 88 57 67 78 95]\n\n\n\nprint(type(maths_np))\nprint(maths_np.dtype)\n\n&lt;class 'numpy.ndarray'&gt;\nint64\n\n\n\nmean_maths = np.mean(maths_np)\nmean_science = np.mean(science_np)\nmean_eco = np.mean(eco_np)\n\nprint(f\"\\nMean Maths score: {mean_maths:.3f}\")\nprint(f\"Mean Science score: {mean_science:.3f}\")\nprint(f\"Mean Economics score: {mean_eco:.3f}\")\n\nprint(f\"\\nMean Maths score (integer): {mean_maths:.2f}\")\n\n\nMean Maths score: 73.850\nMean Science score: 73.650\nMean Economics score: 80.150\n\nMean Maths score (integer): 73.85\n\n\n\n# Finding student with maximum science\nmax_sci_idx = np.argmax(science_np)\nprint(max_sci_idx)\n\n18\n\n\n\n# since we need the name of the student, we use the index (from argmax) to find the name\nmax_sci_student = names[max_sci_idx]\nmax_sci_val = science_np[max_sci_idx]\nprint(f\"\\nStudent with maximum science score: {max_sci_student} ({max_sci_val})\")\n\n\nStudent with maximum science score: Simran (98)\n\n\n\n# Likewise for finding student with maximum |Maths - Science| score\ndiff = np.abs(maths_np - science_np)\nmax_diff_idx = np.argmax(diff)\nmax_diff_student = names[max_diff_idx]\nprint(f\"\\nStudent with max |Maths - Science|: {max_diff_student} (|{maths_np[max_diff_idx]} - {science_np[max_diff_idx]}| = {diff[max_diff_idx]})\")\n\n\nStudent with max |Maths - Science|: Aryan (|60 - 92| = 32)\n\n\n\n\n2.3 Plotting Student Scores with NumPy/Seaborn\n\n# Define bar width and positions\nbar_width = 0.25\nx = np.arange(len(names))\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Plot the bars\nax.bar(x - bar_width, maths_np, width=bar_width, label=\"Maths\", color='blue')\nax.bar(x, science_np, width=bar_width, label=\"Science\", color='green')\nax.bar(x + bar_width, eco_np, width=bar_width, label=\"Economics\", color='red')\n\n# Customize the plot\nax.set_title(\"Student Marks in Three Subjects\", fontsize=16)\nax.set_xlabel(\"Students\", fontsize=12)\nax.set_ylabel(\"Marks\", fontsize=12)\nax.set_xticks(x)\nax.set_xticklabels(names, rotation=45)\nax.legend(title=\"Subjects\")\n\n\n\n\n\n\n\n\n ### 2.4 Reading CSV in Pandas & Repeating Analysis With Pandas, we can directly do:\ndf = pd.read_csv(\"student_scores.csv\")\nand the DataFrame will automatically separate columns into name, maths, and science. Then we can easily compute means, maxima, etc.\n\ndf_students_pandas = pd.read_csv(\"student_scores.csv\")\ndf_students_pandas\n\n\n\n\n\n\n\n\nName\nMaths\nScience\nEconomics\n\n\n\n\n0\nAarav\n53\n56\n67\n\n\n1\nVivaan\n94\n88\n85\n\n\n2\nAditya\n84\n65\n69\n\n\n3\nAnanya\n98\n90\n96\n\n\n4\nIshita\n72\n74\n78\n\n\n5\nKabir\n79\n56\n60\n\n\n6\nNisha\n76\n52\n99\n\n\n7\nRohan\n71\n78\n50\n\n\n8\nPriya\n76\n72\n68\n\n\n9\nSneha\n64\n92\n94\n\n\n10\nAryan\n60\n92\n97\n\n\n11\nMeera\n62\n56\n89\n\n\n12\nTanya\n70\n78\n88\n\n\n13\nSiddharth\n73\n72\n83\n\n\n14\nNeha\n79\n85\n95\n\n\n15\nLaksh\n68\n62\n88\n\n\n16\nPooja\n63\n62\n57\n\n\n17\nRahul\n81\n63\n67\n\n\n18\nSimran\n69\n98\n78\n\n\n19\nKiran\n85\n82\n95\n\n\n\n\n\n\n\n\ndf_students_pandas.describe()\n\n\n\n\n\n\n\n\nMaths\nScience\nEconomics\n\n\n\n\ncount\n20.000000\n20.000000\n20.000000\n\n\nmean\n73.850000\n73.650000\n80.150000\n\n\nstd\n11.230949\n14.224793\n14.928866\n\n\nmin\n53.000000\n52.000000\n50.000000\n\n\n25%\n67.000000\n62.000000\n67.750000\n\n\n50%\n72.500000\n73.000000\n84.000000\n\n\n75%\n79.500000\n85.750000\n94.250000\n\n\nmax\n98.000000\n98.000000\n99.000000\n\n\n\n\n\n\n\n\n!head student_scores.csv\n\nName,Maths,Science,Economics\nAarav,53,56,67\nVivaan,94,88,85\nAditya,84,65,69\nAnanya,98,90,96\nIshita,72,74,78\nKabir,79,56,60\nNisha,76,52,99\nRohan,71,78,50\nPriya,76,72,68\n\n\n\ndf_students_pandas.head?\n\n\nSignature: df_students_pandas.head(n: 'int' = 5) -&gt; 'Self'\nDocstring:\nReturn the first `n` rows.\nThis function returns the first `n` rows for the object based\non position. It is useful for quickly testing if your object\nhas the right type of data in it.\nFor negative values of `n`, this function returns all rows except\nthe last `|n|` rows, equivalent to ``df[:n]``.\nIf n is larger than the number of rows, this function returns all rows.\nParameters\n----------\nn : int, default 5\n    Number of rows to select.\nReturns\n-------\nsame type as caller\n    The first `n` rows of the caller object.\nSee Also\n--------\nDataFrame.tail: Returns the last `n` rows.\nExamples\n--------\n&gt;&gt;&gt; df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n&gt;&gt;&gt; df\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\n6      shark\n7      whale\n8      zebra\nViewing the first 5 lines\n&gt;&gt;&gt; df.head()\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\nViewing the first `n` lines (three in this case)\n&gt;&gt;&gt; df.head(3)\n      animal\n0  alligator\n1        bee\n2     falcon\nFor negative values of `n`\n&gt;&gt;&gt; df.head(-3)\n      animal\n0  alligator\n1        bee\n2     falcon\n3       lion\n4     monkey\n5     parrot\nFile:      ~/mambaforge/lib/python3.12/site-packages/pandas/core/generic.py\nType:      method\n\n\n\n\ndf_students_pandas.head(n=10)\n\n\n\n\n\n\n\n\nName\nMaths\nScience\nEconomics\n\n\n\n\n0\nAarav\n53\n56\n67\n\n\n1\nVivaan\n94\n88\n85\n\n\n2\nAditya\n84\n65\n69\n\n\n3\nAnanya\n98\n90\n96\n\n\n4\nIshita\n72\n74\n78\n\n\n5\nKabir\n79\n56\n60\n\n\n6\nNisha\n76\n52\n99\n\n\n7\nRohan\n71\n78\n50\n\n\n8\nPriya\n76\n72\n68\n\n\n9\nSneha\n64\n92\n94\n\n\n\n\n\n\n\n\ndf_students_pandas.tail()\n\n\n\n\n\n\n\n\nName\nMaths\nScience\nEconomics\n\n\n\n\n15\nLaksh\n68\n62\n88\n\n\n16\nPooja\n63\n62\n57\n\n\n17\nRahul\n81\n63\n67\n\n\n18\nSimran\n69\n98\n78\n\n\n19\nKiran\n85\n82\n95\n\n\n\n\n\n\n\n\n# Displaying the indices and columns\nprint(f\"Indices: {df_students_pandas.index}\")\nprint(f\"Columns: {df_students_pandas.columns}\")\n\nIndices: RangeIndex(start=0, stop=20, step=1)\nColumns: Index(['Name', 'Maths', 'Science', 'Economics'], dtype='object')\n\n\n\n# Displaying the data types of each column\nprint(\"\\nData Info:\")\ndf_students_pandas.info()\n\n\nData Info:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 20 entries, 0 to 19\nData columns (total 4 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   Name       20 non-null     object\n 1   Maths      20 non-null     int64 \n 2   Science    20 non-null     int64 \n 3   Economics  20 non-null     int64 \ndtypes: int64(3), object(1)\nmemory usage: 772.0+ bytes\n\n\n\n# Mean\nprint(\"\\nMean Maths:\", df_students_pandas['Maths'].mean())\nprint(\"Mean Science:\", df_students_pandas['Science'].mean())\n\n\nMean Maths: 73.85\nMean Science: 73.65\n\n\n\n# Student with maximum science using different indexing methods\ndf_students_pandas.loc[df_students_pandas['Science'].idxmax()]\n\nName         Simran\nMaths            69\nScience          98\nEconomics        78\nName: 18, dtype: object\n\n\n\n# Student with maximum |Maths - Science|\ndiff_pd = (df_students_pandas['Maths'] - df_students_pandas['Science']).abs()\nmax_diff_idx_pd = diff_pd.idxmax()\nprint(\"\\nStudent with max |Maths - Science|:\", df_students_pandas.loc[max_diff_idx_pd, 'Name'], diff_pd[max_diff_idx_pd])\n\n\nStudent with max |Maths - Science|: Aryan 32\n\n\n\n\nHistogram of Student Scores using df.plot()\n\ndf_students_pandas.plot.hist(subplots=True, layout=(1, 3), figsize=(18, 6), bins=10, alpha=0.6)\n\narray([[&lt;Axes: ylabel='Frequency'&gt;, &lt;Axes: ylabel='Frequency'&gt;,\n        &lt;Axes: ylabel='Frequency'&gt;]], dtype=object)\n\n\n\n\n\n\n\n\n\n\ndf_students_pandas.plot.hist(subplots=True, layout=(3, 1), figsize=(6, 9), bins=10, alpha=0.6)\n\narray([[&lt;Axes: ylabel='Frequency'&gt;],\n       [&lt;Axes: ylabel='Frequency'&gt;],\n       [&lt;Axes: ylabel='Frequency'&gt;]], dtype=object)\n\n\n\n\n\n\n\n\n\n\ndf_students_pandas.plot.hist(subplots=False, alpha=0.6)\n\n\n\n\n\n\n\n\n\ndf_students_pandas.plot.density()\n\n\n\n\n\n\n\n\n\n\nSome more plotting examples with Pandas df.plot()\n\nnormal = pd.Series(np.random.normal(loc = 10, scale = 2, size = 2000)) # loc is mean, scale is standard deviation\ngamma = pd.Series(np.random.gamma(shape = 2, scale = 2, size = 2000)) # shape is k, scale is theta\nuniform = pd.Series(np.random.uniform(low = 0, high = 10, size = 2000)) # low is a, high is b\n\ndf = pd.DataFrame({'Normal': normal, 'Gamma': gamma, 'Uniform': uniform})\ndf.head()\n\n\n\n\n\n\n\n\nNormal\nGamma\nUniform\n\n\n\n\n0\n8.566490\n4.439362\n2.169578\n\n\n1\n10.946834\n5.073406\n0.512258\n\n\n2\n7.099340\n1.638423\n2.346859\n\n\n3\n11.799476\n0.733187\n2.480262\n\n\n4\n9.174528\n4.601980\n5.228461\n\n\n\n\n\n\n\n\ndf.plot(kind='hist', bins=200, alpha=0.6, figsize=(12, 6))\nplt.title(\"Histogram of Distributions\", fontsize=16)\nplt.xlabel(\"Value\", fontsize=12)\nplt.ylabel(\"Frequency\", fontsize=12)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nSeeing them separately\n\nfig, axes = plt.subplots(1, 3, figsize=(18, 6), sharey=True)\nsns.histplot(df['Normal'], bins=100, kde=True, color=\"skyblue\", ax=axes[0])\naxes[0].set_title(\"Normal Distribution\", fontsize=14)\nsns.histplot(df['Gamma'], bins=100, kde=True, color=\"salmon\", ax=axes[1])\naxes[1].set_title(\"Gamma Distribution\", fontsize=14)\nsns.histplot(df['Uniform'], bins=100, kde=True, color=\"limegreen\", ax=axes[2])\naxes[2].set_title(\"Uniform Distribution\", fontsize=14)\n\nfor ax in axes:\n    ax.set_xlabel(\"Value\", fontsize=12)\n    ax.set_ylabel(\"Frequency\", fontsize=12)\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/introduction-pandas.html#core-pandas-data-structures",
    "href": "notebooks/introduction-pandas.html#core-pandas-data-structures",
    "title": "Introduction to Pandas",
    "section": "3. Core Pandas Data Structures",
    "text": "3. Core Pandas Data Structures\n\nSeries\nA Series is a one-dimensional labeled array. It can be created from a Python list or NumPy array, optionally providing a custom index. The index labels let you reference elements by name instead of by integer position.\n\n# Creating a Pandas Series\nlabels = ['a','b','c','d']\ndata = [10, 0, 50, 40]\nser = pd.Series(data, index=labels, dtype=np.float64)\nser\n\na    10.0\nb     0.0\nc    50.0\nd    40.0\ndtype: float64\n\n\n\n# Other methods to create a Pandas Series\nd = {'a': 10, 'b': 0, 'c': 50, 'd': 40}\nser = pd.Series(d)\nser\n\na    10\nb     0\nc    50\nd    40\ndtype: int64\n\n\n\n# Accessing by label - like a python dictionary\nprint(\"\\nValue at index 'c':\", ser['c'])\nprint(d['c'])\n\n\nValue at index 'c': 50\n50\n\n\n\n# Vectorized ops\nprint(\"\\nMultiply entire Series by 2:\")\nser*2 \n\n\nMultiply entire Series by 2:\n\n\na     20\nb      0\nc    100\nd     80\ndtype: int64\n\n\n\nser.sort_values()\n\nb     0\na    10\nd    40\nc    50\ndtype: int64\n\n\n\nser\n\na    10\nb     0\nc    50\nd    40\ndtype: int64\n\n\n\nser.sort_values(inplace=True)\nser\n\nb     0\na    10\nd    40\nc    50\ndtype: int64\n\n\n\nser.plot()\n\n\n\n\n\n\n\n\n\nser.sort_index(inplace=True)\nser\n\na    10\nb     0\nc    50\nd    40\ndtype: int64\n\n\n\nser.plot.bar()\n\n\n\n\n\n\n\n\n\nser.plot(kind='bar', rot=0)\n\n\n\n\n\n\n\n\n\nser.plot(kind='barh')\n\n\n\n\n\n\n\n\n\n# Accessing by position - like a numpy array\nprint(\"\\nValue at position 2:\", ser.iloc[2])\n\n\nValue at position 2: 50\n\n\n\nser\n\na    10\nb     0\nc    50\nd    40\ndtype: int64\n\n\n\n# Access by key - like a python dictionary\nprint(\"\\nValue at index 'c':\", ser.loc['c'])\nprint(\"\\nValue at index 'c':\", ser['c'])\n\n\nValue at index 'c': 50\n\nValue at index 'c': 50\n\n\n\nser['c'], ser.loc['c']\n\n(np.int64(50), np.int64(50))\n\n\n\n# Access range\nprint(\"\\nValues in range 1 to 3:\")\nser.iloc[1:3]\n\n\nValues in range 1 to 3:\n\n\nb     0\nc    50\ndtype: int64\n\n\n\n# access range by label\nprint(\"\\nValues in range 'b' to 'd':\")\nser.loc['b':'d']\n\n\nValues in range 'b' to 'd':\n\n\nb     0\nc    50\nd    40\ndtype: int64\n\n\n\n# Other methods\nser.describe()\n\ncount     4.000000\nmean     25.000000\nstd      23.804761\nmin       0.000000\n25%       7.500000\n50%      25.000000\n75%      42.500000\nmax      50.000000\ndtype: float64\n\n\n\nprint(ser.mean(), type(ser.mean()), ser.mean().item(), type(ser.mean().item()))\n\n25.0 &lt;class 'numpy.float64'&gt; 25.0 &lt;class 'float'&gt;\n\n\n\nser\n\na    10\nb     0\nc    50\nd    40\ndtype: int64\n\n\n\nser.rank()\n\na    2.0\nb    1.0\nc    4.0\nd    3.0\ndtype: float64\n\n\n\n# Access numpy array from Pandas Series\narr = ser.values\nprint(\"\\nNumpy array:\", arr)\nprint(\"Type of array:\", type(arr))\n\n\nNumpy array: [10  0 50 40]\nType of array: &lt;class 'numpy.ndarray'&gt;\n\n\n\nser\n\na    10\nb     0\nc    50\nd    40\ndtype: int64\n\n\n\n# Print series where elements are greater than 20\nmask = ser &gt; 20\nprint(mask)\n\na    False\nb    False\nc     True\nd     True\ndtype: bool\n\n\n\nser[mask]\n\nc    50\nd    40\ndtype: int64\n\n\n\n\nDataFrame\nA DataFrame is a 2D tabular data structure with labeled rows (index) and columns. Each column is essentially a Pandas Series.\nWe can build one from a dictionary of lists, or by reading data from external sources (CSV, SQL, Excel, etc.).\n\n# Creating a DataFrame from a dictionary\ndata_dict = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [24, 42, 18],\n    'Score': [88.5, 93.0, 78.0]\n}\ndf = pd.DataFrame(data_dict)\ndf.index = df['Name']\ndf = df.drop(['Name'], axis=1)\ndf\n\n\n\n\n\n\n\n\nAge\nScore\n\n\nName\n\n\n\n\n\n\nAlice\n24\n88.5\n\n\nBob\n42\n93.0\n\n\nCharlie\n18\n78.0\n\n\n\n\n\n\n\n\ndf.plot(kind='bar')\n\n\n\n\n\n\n\n\n\ndata_dict = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [24, 42, 18],\n    'Score': [88.5, 93.0, 78.0]\n}\ndf = pd.DataFrame(data_dict)\ndf\n\n\n\n\n\n\n\n\nName\nAge\nScore\n\n\n\n\n0\nAlice\n24\n88.5\n\n\n1\nBob\n42\n93.0\n\n\n2\nCharlie\n18\n78.0"
  },
  {
    "objectID": "notebooks/introduction-pandas.html#indexing-selection",
    "href": "notebooks/introduction-pandas.html#indexing-selection",
    "title": "Introduction to Pandas",
    "section": "4. Indexing & Selection",
    "text": "4. Indexing & Selection\nDataFrame selection can occur by column name, row label/index name (.loc), or row position/numpy-array like indexing (.iloc). Boolean masks also apply.\n\ndf[col] =&gt; a Series of that column.\ndf.loc[row_label] =&gt; row by label.\ndf.iloc[row_position] =&gt; row by integer position.\nBoolean indexing =&gt; df[df['Age'] &gt; 20].\nSlicing =&gt; df.loc['a':'b'], df.iloc[0:2].\n\n\ndf2 = pd.DataFrame({\n    'X': np.random.rand(5),\n    'Y': np.random.rand(5),\n    'Z': np.random.randint(1,10,size=5)\n}, index=['a','b','c','d','e'])\n\ndf2\n\n\n\n\n\n\n\n\nX\nY\nZ\n\n\n\n\na\n0.996172\n0.280775\n7\n\n\nb\n0.578735\n0.931498\n4\n\n\nc\n0.654491\n0.699822\n4\n\n\nd\n0.172585\n0.014937\n9\n\n\ne\n0.858278\n0.753386\n8\n\n\n\n\n\n\n\n\ndf2\n\n\n\n\n\n\n\n\nX\nY\nZ\n\n\n\n\na\n0.967366\n0.753478\n2\n\n\nb\n0.401003\n0.238826\n6\n\n\nc\n0.157301\n0.384844\n8\n\n\nd\n0.016926\n0.387394\n7\n\n\ne\n0.659675\n0.817511\n4\n\n\n\n\n\n\n\n\nprint(\"\\nSelect column 'Y':\")\nprint(df2['Y'])\n\n\nSelect column 'Y':\na    0.280775\nb    0.931498\nc    0.699822\nd    0.014937\ne    0.753386\nName: Y, dtype: float64\n\n\n\ntype(df2['Y'])\n\npandas.core.series.Series\n\n\n\nprint(\"\\nSelect row 'c' using loc:\")\ndisplay(df2.loc['c'])\n\n\nSelect row 'c' using loc:\n\n\nX    0.654491\nY    0.699822\nZ    4.000000\nName: c, dtype: float64\n\n\n\nprint(\"\\nSelect row at position 2 using iloc:\")\ndisplay(df2.iloc[2])\n\n\nSelect row at position 2 using iloc:\n\n\nX    0.654491\nY    0.699822\nZ    4.000000\nName: c, dtype: float64\n\n\n\nprint(\"\\nBoolean mask: rows where Z &gt; 5\")\nmask = df2['Z'] &gt; 5\ndisplay(df2[mask])\n\n\nBoolean mask: rows where Z &gt; 5\n\n\n\n\n\n\n\n\n\nX\nY\nZ\n\n\n\n\na\n0.996172\n0.280775\n7\n\n\nd\n0.172585\n0.014937\n9\n\n\ne\n0.858278\n0.753386\n8\n\n\n\n\n\n\n\n\n# loc to address by row, col \"names\" AND iloc to address by row, col \"indices\"\nprint(df2.loc['c', 'Y'], df2.iloc[2, 1])\n\n0.6998221861720456 0.6998221861720456\n\n\n\n# Select multiple rows\nprint(\"\\nSelect rows 'a' and 'c':\")\ndisplay(df2.loc[['a', 'c']])\n\n\nSelect rows 'a' and 'c':\n\n\n\n\n\n\n\n\n\nX\nY\nZ\n\n\n\n\na\n0.996172\n0.280775\n7\n\n\nc\n0.654491\n0.699822\n4\n\n\n\n\n\n\n\n\n# Select multiple columns\nprint(\"\\nSelect columns 'X' and 'Z':\")\ndisplay(df2[['X', 'Z']])\n\n\nSelect columns 'X' and 'Z':\n\n\n\n\n\n\n\n\n\nX\nZ\n\n\n\n\na\n0.610954\n6\n\n\nb\n0.059152\n3\n\n\nc\n0.483286\n9\n\n\nd\n0.325020\n8\n\n\ne\n0.059134\n3\n\n\n\n\n\n\n\n\n# Use loc notation to select multiple column\nprint(\"\\nSelect columns 'X' and 'Z' using loc:\")\n#display(df2.loc[:, ['X', 'Z']])\n\n\n# Select rows 'b' and 'd' and columns 'X' and 'Z'\nrows_to_select = ['b', 'd']\ncols_to_select = ['X', 'Z']\ndf2.loc[rows_to_select, cols_to_select]\n\n\ndf2.loc['b':'d', 'Y':'Z']\n\n\nSelect columns 'X' and 'Z' using loc:\n\n\n\n\n\n\n\n\n\nY\nZ\n\n\n\n\nb\n0.931498\n4\n\n\nc\n0.699822\n4\n\n\nd\n0.014937\n9\n\n\n\n\n\n\n\n\n# Select rows and columns\nprint(\"\\nSelect rows 'b' and 'd', columns 'Y' and 'Z':\")\ndisplay(df2.loc[['b', 'd'], ['Y', 'Z']])\n\n\nSelect rows 'b' and 'd', columns 'Y' and 'Z':\n\n\n\n\n\n\n\n\n\nY\nZ\n\n\n\n\nb\n0.895559\n3\n\n\nd\n0.573120\n8"
  },
  {
    "objectID": "notebooks/introduction-pandas.html#merging-joining-data",
    "href": "notebooks/introduction-pandas.html#merging-joining-data",
    "title": "Introduction to Pandas",
    "section": "5. Merging & Joining Data",
    "text": "5. Merging & Joining Data\nPandas provides efficient ways to combine datasets:\n\npd.concat([df1, df2]): Stack DataFrames (row or column-wise). Preferred for simple stacking horizontally or vertically.\ndf1.append(df2): Similar to concat row-wise but less efficient since it involves creation of a new index.\npd.merge(df1, df2, on='key'): Database-style merges. Also left_on, right_on, left_index, right_index.\n\nWe can specify how to merge: ‘inner’, ‘outer’, ‘left’, ‘right’.\n\nConcatenation of two dataframes with same columns - just stacks them vertically along with their indices\n\nx = pd.DataFrame({'A': ['A0', 'A1'], 'B': ['B0', 'B1']}, index=[0, 1])\ny = pd.DataFrame({'A': ['A2', 'A3'], 'B': ['B2', 'B3']}, index=[0, 1])\ndf_concat = pd.concat([x, y])\ndisplay(\"x:\")\ndisplay(x)\ndisplay(\"y:\")\ndisplay(y)\ndisplay(\"pd.concat([x, y]):\")\ndisplay(df_concat)\n\n'x:'\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n1\nA1\nB1\n\n\n\n\n\n\n\n'y:'\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA2\nB2\n\n\n1\nA3\nB3\n\n\n\n\n\n\n\n'pd.concat([x, y]):'\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n1\nA1\nB1\n\n\n0\nA2\nB2\n\n\n1\nA3\nB3\n\n\n\n\n\n\n\n\n\nHaving similar indices will result in ambuiguity in addressing the rows, so we need to reset the index or use ignore_index=True\n\ndf_concat.loc[0]\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n0\nA2\nB2\n\n\n\n\n\n\n\n\ndf = pd.concat([x, y], ignore_index=True)\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n1\nA1\nB1\n\n\n2\nA2\nB2\n\n\n3\nA3\nB3\n\n\n\n\n\n\n\n\n\nExample specifying the axis of concatenation - row-wise or column-wise.\n\nz = pd.DataFrame({'C': ['C0', 'C1'], 'D': ['D0', 'D1']}, index=[0, 1])\ndf_col_combine = pd.concat([x, z], axis='columns')\n\ndisplay(\"x:\")\ndisplay(x)\ndisplay(\"z:\")\ndisplay(z)\ndisplay(\"pd.concat([x, z], axis='columns'):\")\ndisplay(df_col_combine)\n\n'x:'\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nA0\nB0\n\n\n1\nA1\nB1\n\n\n\n\n\n\n\n'z:'\n\n\n\n\n\n\n\n\n\nC\nD\n\n\n\n\n0\nC0\nD0\n\n\n1\nC1\nD1\n\n\n\n\n\n\n\n\"pd.concat([x, z], axis='columns'):\"\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\nA0\nB0\nC0\nD0\n\n\n1\nA1\nB1\nC1\nD1\n\n\n\n\n\n\n\n\n\nLet’s use seaborn’s ‘tips’ dataset to demonstrate merges.\n\ntips = sns.load_dataset('tips')  # Load the 'tips' dataset from seaborn\nprint(\"'tips' dataset shape:\", tips.shape)  # Print the shape (rows, columns) of the dataset\ndisplay(tips.head())  # Show the first 5 rows of the dataset\n\n'tips' dataset shape: (244, 7)\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\n\nis_vip = np.random.choice([True, False], size=len(tips))  # Randomly assign VIP status (True/False) to each row\n\ncustomer_ids = np.arange(1, len(tips) + 1)  # Create unique customer IDs starting from 1\nnp.random.shuffle(customer_ids)  # Shuffle the customer IDs randomly\n\nvip_info = pd.DataFrame({\n    'customer_id': customer_ids,  # Assign customer IDs\n    'vip': is_vip  # Assign the corresponding VIP status\n})\n\nprint(\"VIP info:\")\ndisplay(vip_info)  # Display the VIP information table\n\nVIP info:\n\n\n\n\n\n\n\n\n\ncustomer_id\nvip\n\n\n\n\n0\n119\nTrue\n\n\n1\n148\nTrue\n\n\n2\n2\nTrue\n\n\n3\n84\nTrue\n\n\n4\n76\nFalse\n\n\n...\n...\n...\n\n\n239\n218\nTrue\n\n\n240\n146\nTrue\n\n\n241\n176\nTrue\n\n\n242\n164\nFalse\n\n\n243\n19\nTrue\n\n\n\n\n244 rows × 2 columns\n\n\n\n\ntips_ext = tips.copy()  # Create a copy of the original 'tips' dataset\nnew_customer_ids = np.arange(1, len(tips) + 1)  # Generate new unique customer IDs\nnp.random.shuffle(new_customer_ids)  # Shuffle the customer IDs randomly\n\ntips_ext['customer_id'] = new_customer_ids  # Add the shuffled customer IDs as a new column\nprint(\"Extended tips:\")\ndisplay(tips_ext)  # Show the extended dataset\n\nExtended tips:\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\ncustomer_id\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n32\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n22\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n136\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n137\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n156\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n228\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n84\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n219\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n241\n\n\n243\n18.78\n3.00\nFemale\nNo\nThur\nDinner\n2\n209\n\n\n\n\n244 rows × 8 columns\n\n\n\n\nmerged = pd.merge(tips_ext, vip_info, on='customer_id', how='left')  # Merge the datasets using 'customer_id'\nprint(\"Merged Data:\")\ndisplay(merged)  # Display the merged dataset\n\nMerged Data:\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\ncustomer_id\nvip\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n32\nTrue\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n22\nFalse\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n136\nTrue\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n137\nTrue\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n156\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n228\nFalse\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n84\nTrue\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n219\nFalse\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n241\nTrue\n\n\n243\n18.78\n3.00\nFemale\nNo\nThur\nDinner\n2\n209\nTrue\n\n\n\n\n244 rows × 9 columns"
  },
  {
    "objectID": "notebooks/introduction-pandas.html#groupby-aggregation",
    "href": "notebooks/introduction-pandas.html#groupby-aggregation",
    "title": "Introduction to Pandas",
    "section": "6. GroupBy & Aggregation",
    "text": "6. GroupBy & Aggregation\nThe GroupBy abstraction splits data into groups, applies operations, then combines results. Common for summarizing numeric columns by categories.\n\nExample with tips data\nWe’ll group by day of the week and compute average tip, total tip, etc.\n\ntips.loc[:, 'day']\n\n0       Sun\n1       Sun\n2       Sun\n3       Sun\n4       Sun\n       ... \n239     Sat\n240     Sat\n241     Sat\n242     Sat\n243    Thur\nName: day, Length: 244, dtype: category\nCategories (4, object): ['Thur', 'Fri', 'Sat', 'Sun']\n\n\n\ntips['day'].value_counts()\n\nday\nSat     87\nSun     76\nThur    62\nFri     19\nName: count, dtype: int64\n\n\n\n# Unique values in the 'day' column\nunique_days = tips['day'].unique()\nprint(\"Unique days:\", unique_days)\n\nUnique days: ['Sun', 'Sat', 'Thur', 'Fri']\nCategories (4, object): ['Thur', 'Fri', 'Sat', 'Sun']\n\n\n\nmask = tips['day'] == 'Sun'\nmask\n\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n239    False\n240    False\n241    False\n242    False\n243    False\nName: day, Length: 244, dtype: bool\n\n\n\ntips[mask]['tip'].mean().item()\n\n3.2551315789473687\n\n\n\nout = {}\nfor day in unique_days:\n    mask = tips['day'] == day\n    out[day] = tips[mask]['tip'].mean().item()\n\nout\n\n{'Sun': 3.2551315789473687,\n 'Sat': 2.993103448275862,\n 'Thur': 2.771451612903225,\n 'Fri': 2.7347368421052627}\n\n\n\nser = pd.Series(out)\nser.plot(kind='bar')\n\n\n\n\n\n\n\n\n\ngrpby = tips.groupby('day', observed=True)['tip']\ngrpby.mean()\n\nday\nThur    2.771452\nFri     2.734737\nSat     2.993103\nSun     3.255132\nName: tip, dtype: float64\n\n\n\n# Group tips by 'day' column, aggregate 'tip' in different ways\ngrouped = tips.groupby('day', observed=True)['tip']\nprint(\"Mean tip by day:\")\ndisplay(grouped.mean())\n\nprint(\"\\nMultiple Aggregations (count, sum, mean):\")\ndisplay(grouped.agg(['count','sum','mean','std']))\n\nMean tip by day:\n\n\nday\nThur    2.771452\nFri     2.734737\nSat     2.993103\nSun     3.255132\nName: tip, dtype: float64\n\n\n\nMultiple Aggregations (count, sum, mean):\n\n\n\n\n\n\n\n\n\ncount\nsum\nmean\nstd\n\n\nday\n\n\n\n\n\n\n\n\nThur\n62\n171.83\n2.771452\n1.240223\n\n\nFri\n19\n51.96\n2.734737\n1.019577\n\n\nSat\n87\n260.40\n2.993103\n1.631014\n\n\nSun\n76\n247.39\n3.255132\n1.234880\n\n\n\n\n\n\n\nMultiple Grouping Keys: We can group by multiple columns, e.g. day and time (Lunch/Dinner).\n\nmulti_grouped = tips.groupby(['day', 'time'], observed=True)['total_bill'].agg(['mean','size'])\nmulti_grouped\n\n\n\n\n\n\n\n\n\nmean\nsize\n\n\nday\ntime\n\n\n\n\n\n\nThur\nLunch\n17.664754\n61\n\n\nDinner\n18.780000\n1\n\n\nFri\nLunch\n12.845714\n7\n\n\nDinner\n19.663333\n12\n\n\nSat\nDinner\n20.441379\n87\n\n\nSun\nDinner\n21.410000\n76"
  },
  {
    "objectID": "notebooks/introduction-pandas.html#pivot-tables",
    "href": "notebooks/introduction-pandas.html#pivot-tables",
    "title": "Introduction to Pandas",
    "section": "7. Pivot Tables",
    "text": "7. Pivot Tables\nPivot tables provide a 2D summarization akin to spreadsheets:\ndf.pivot_table(values='col', index='rows', columns='cols', aggfunc='mean')\nWe can also specify margins (margins=True) to get row/column totals.\n\n# Pivot example using 'tips'\npivot_tips = tips.pivot_table(\n    values='tip',\n    index='day',\n    columns='time',\n    aggfunc='mean',\n    margins=True, observed=True\n)\npivot_tips\n\n\n\n\n\n\n\ntime\nLunch\nDinner\nAll\n\n\nday\n\n\n\n\n\n\n\nThur\n2.767705\n3.000000\n2.771452\n\n\nFri\n2.382857\n2.940000\n2.734737\n\n\nSat\nNaN\n2.993103\n2.993103\n\n\nSun\nNaN\n3.255132\n3.255132\n\n\nAll\n2.728088\n3.102670\n2.998279\n\n\n\n\n\n\n\n\n# handling nan values by filling them with 0\ntips_fillna = pivot_tips.fillna(0, inplace=False)\n\n# handling nan values by dropping them\ntips_dropna = pivot_tips.dropna()\n\ndisplay(tips_fillna)\ndisplay(tips_dropna)\n\n\n\n\n\n\n\ntime\nLunch\nDinner\nAll\n\n\nday\n\n\n\n\n\n\n\nThur\n2.767705\n3.000000\n2.771452\n\n\nFri\n2.382857\n2.940000\n2.734737\n\n\nSat\n0.000000\n2.993103\n2.993103\n\n\nSun\n0.000000\n3.255132\n3.255132\n\n\nAll\n2.728088\n3.102670\n2.998279\n\n\n\n\n\n\n\n\n\n\n\n\n\ntime\nLunch\nDinner\nAll\n\n\nday\n\n\n\n\n\n\n\nThur\n2.767705\n3.00000\n2.771452\n\n\nFri\n2.382857\n2.94000\n2.734737\n\n\nAll\n2.728088\n3.10267\n2.998279"
  },
  {
    "objectID": "notebooks/introduction-pandas.html#string-operations",
    "href": "notebooks/introduction-pandas.html#string-operations",
    "title": "Introduction to Pandas",
    "section": "8. String Operations",
    "text": "8. String Operations\nPandas offers vectorized string methods under str. They handle missing data gracefully and allow powerful regex usage.\nKey methods: - case changes: .str.lower(), .str.upper(), .str.title(), etc. - trimming: .str.strip(), .str.rstrip(), etc. - Regex: .str.contains(), .str.extract(), .str.replace(). - split: .str.split(), .str.get(), etc.\n\n# Example: string cleaning\ns_str = pd.Series([\"  HELLO  \", \"world! \", None, \"PyTHon 3.9 \", \"pandas is COOL \"], name='mystrings')\nprint(\"Original:\")\ndisplay(s_str)\n\n# Lower + strip\ncleaned = s_str.str.lower().str.strip()\n\nprint(\"Cleaned:\")\ndisplay(cleaned)\n\n# Contains 'python'?\nprint(\"\\nContains 'python'?\")\ndisplay(cleaned.str.contains('python'))\n\n# Replace 'is' with 'IS'\nreplaced = cleaned.str.replace('is', 'IS', case=False)\nprint(\"\\nReplaced 'is':\")\ndisplay(replaced)\n\nOriginal:\n\n\n0            HELLO  \n1            world! \n2               None\n3        PyTHon 3.9 \n4    pandas is COOL \nName: mystrings, dtype: object\n\n\nCleaned:\n\n\n0             hello\n1            world!\n2              None\n3        python 3.9\n4    pandas is cool\nName: mystrings, dtype: object\n\n\n\nContains 'python'?\n\n\n0    False\n1    False\n2     None\n3     True\n4    False\nName: mystrings, dtype: object\n\n\n\nReplaced 'is':\n\n\n0             hello\n1            world!\n2              None\n3        python 3.9\n4    pandas IS cool\nName: mystrings, dtype: object\n\n\nThe presence of None doesn’t break things: the .str accessor handles missing data by returning NaN in operations."
  },
  {
    "objectID": "notebooks/introduction-pandas.html#using-eval-query",
    "href": "notebooks/introduction-pandas.html#using-eval-query",
    "title": "Introduction to Pandas",
    "section": "9. Using eval() & query()",
    "text": "9. Using eval() & query()\neval() allows efficient expression evaluation on DataFrame columns:\ndf.eval('NewCol = (A + B) / C', inplace=True)\nYou can treat column names like variables, and skip creation of large temporary arrays.\nquery() provides a more readable syntax for row selection:\ndf.query('A &lt; 5 and B &gt; 2')\n\ndf_eval = pd.DataFrame({\n    'A': np.random.randn(5),\n    'B': np.random.randn(5),\n    'C': np.random.randn(5)\n})\nprint(\"Before eval:\")\ndisplay(df_eval)\n\ndf_eval.eval('D = (A + B) * C', inplace=True)\nprint(\"\\nAfter eval, new column 'D':\")\ndisplay(df_eval)\n\n# query\nres_q = df_eval.query('D &gt; 0')\nprint(\"\\nRows where D &gt; 0:\")\ndisplay(res_q)\n\nBefore eval:\n\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n-1.065378\n-0.126780\n0.644445\n\n\n1\n-2.225845\n-0.966845\n-1.219053\n\n\n2\n-1.012120\n0.980824\n-0.766431\n\n\n3\n-1.453329\n0.220464\n-2.387369\n\n\n4\n-0.756387\n0.964827\n1.534876\n\n\n\n\n\n\n\n\nAfter eval, new column 'D':\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n-1.065378\n-0.126780\n0.644445\n-0.768281\n\n\n1\n-2.225845\n-0.966845\n-1.219053\n3.892059\n\n\n2\n-1.012120\n0.980824\n-0.766431\n0.023986\n\n\n3\n-1.453329\n0.220464\n-2.387369\n2.943305\n\n\n4\n-0.756387\n0.964827\n1.534876\n0.319929\n\n\n\n\n\n\n\n\nRows where D &gt; 0:\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n1\n-2.225845\n-0.966845\n-1.219053\n3.892059\n\n\n2\n-1.012120\n0.980824\n-0.766431\n0.023986\n\n\n3\n-1.453329\n0.220464\n-2.387369\n2.943305\n\n\n4\n-0.756387\n0.964827\n1.534876\n0.319929"
  },
  {
    "objectID": "notebooks/intro.html",
    "href": "notebooks/intro.html",
    "title": "Inroduction",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nfirst_4_chars = \"appl\"\n\nprobs = np.zeros(27) # 26 letters + space (EOS)\n\n# Store i to s\nitos = list(\"abcdefghijklmnopqrstuvwxyz \")\n\n# stoi \nstoi = {char: i for i, char in enumerate(itos)}\n\n# Fill in the probabilities\nprobs[stoi[\"a\"]] = 0.1\nprobs[stoi[\"e\"]] = 0.3\nprobs[stoi[\"i\"]] = 0.2\nprobs[stoi[\"o\"]] = 0.1\nprobs[stoi[\"u\"]] = 0.05\nprobs[stoi[\" \"]] = 0.05\n\nprobability_distribution = torch.distributions.Categorical(torch.tensor(probs))\n\n\nsample = probability_distribution.sample()\nprint(f\"Sampled character: {itos[sample]}\")\n\nSampled character: a\n\n\n\nsamples_numpy = np.random.uniform(0, 1, 1000)\nprint(samples_numpy[:10])\nplt.hist(samples_numpy)\n\n[0.18872185 0.29419573 0.05307716 0.4139927  0.80335078 0.64528118\n 0.4575413  0.76490687 0.53933945 0.3135855 ]\n\n\n(array([100.,  86., 105.,  99., 102.,  90., 105., 106., 104., 103.]),\n array([0.00367548, 0.10305437, 0.20243325, 0.30181214, 0.40119103,\n        0.50056992, 0.59994881, 0.6993277 , 0.79870659, 0.89808548,\n        0.99746437]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\n\nclass SimplePRNG:\n    def __init__(self, seed=42):\n        # Initialize the generator with a seed\n        self.modulus = 2**31 - 1  # Large prime modulus\n        self.multiplier = 1664525\n        self.increment = 1013904223\n        self.state = seed\n\n    def uniform(self, low=0.0, high=1.0, size=None):\n        # Generate random numbers in the range [low, high)\n        if size is None:\n            size = 1  # Default to a single number if size is None\n        if isinstance(size, int):\n            size = (size,)  # Convert size to tuple\n\n        # Generate random numbers\n        random_numbers = np.empty(size)\n        for idx in np.ndindex(size):\n            self.state = (self.multiplier * self.state + self.increment) % self.modulus\n            random_numbers[idx] = low + (high - low) * (self.state / self.modulus)\n\n        return random_numbers \n\n# Example usage:\nprng = SimplePRNG(seed=12345)\nprint(prng.uniform(0, 1, 50))  \n\n[0.04080538 0.04087837 0.54709049 0.26713204 0.42986223 0.90642683\n 0.59240588 0.8643601  0.45993872 0.96243078 0.56511522 0.88322526\n 0.98992417 0.00597593 0.55550726 0.19979239 0.90062773 0.84657695\n 0.96436855 0.03375009 0.34428985 0.54191328 0.67693687 0.81460587\n 0.30590164 0.39907677 0.73545432 0.56768856 0.26844794 0.78549411\n 0.06020346 0.63806449 0.76347271 0.89276656 0.72407304 0.15397659\n 0.35789549 0.46641842 0.58988864 0.86842092 0.80445417 0.54725703\n 0.48183308 0.68513887 0.24797944 0.44857785 0.52156459 0.77294949\n 0.22528635 0.23579403]\n\n\n\nsamples_our_prng = prng.uniform(0, 1, 1000)\n\n\nplt.hist(samples_our_prng)\n\n(array([ 96.,  94., 101.,  98.,  92.,  97., 107., 129.,  81., 105.]),\n array([0.00156537, 0.10117911, 0.20079286, 0.30040661, 0.40002035,\n        0.4996341 , 0.59924785, 0.69886159, 0.79847534, 0.89808909,\n        0.99770283]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "questions.html",
    "href": "questions.html",
    "title": "Prerequisite",
    "section": "",
    "text": "Instructions:\n\nSolve the following questions to assess your understanding of Python basics, data structures, and statistics.\nCreate a single Juptyer notebook with solutions to all questions.\nInclude output for each code cell.\nAdd explanations and comments to your code where necessary using Markdown cells.\nDO NOT cheat or copy solutions from the internet. The purpose of this exercise is to evaluate your current knowledge and skills and to help you prepare for the course.\n\n\n\n\nList Operations and Basic Statistics:\n\nCreate a list of the first 20 natural numbers.\nCompute the sum of all even numbers in the list.\nCompute the product of all odd numbers in the list.\nCalculate the mean, median, and standard deviation of the list.\n\nMutable vs. Immutable Data Types:\n\nExplain the difference between mutable and immutable data types in Python. Provide examples of each.\n\nFibonacci Sequence:\n\nWrite a Python function that takes a number n and returns a list of the first n Fibonacci numbers.\nPlot the Fibonacci sequence using a line graph.\n\nList Manipulation:\n\nGiven a list [3, 5, 7, 9, 11, 13]:\n\nInsert 6 at the 3rd index.\nRemove the number 7 from the list.\nReverse the list.\nCalculate the mean and median of the modified list.\n\n\nUser Input and Basic Statistics:\n\nWrite a program to read a comma-separated list of numbers from the user (e.g., “10, 20, 30, 40”).\nCalculate the mean of the numbers.\nIdentify and print the smallest and largest numbers.\nPlot a histogram of the numbers.\n\nPalindrome Check:\n\nWrite a program to check if a string is a palindrome (ignoring spaces and case).\nInput: \"A man a plan a canal Panama\"\nOutput: True\n\nDictionary Operations:\n\nCreate a dictionary of student names (keys) and their marks (values).\nCompute the average marks.\nPrint the names of students scoring above the average.\nVisualize the distribution of marks using a bar chart.\n\nTuple List Creation:\n\nCreate a list of tuples, where each tuple contains a number and its square (e.g., [(1, 1), (2, 4), (3, 9), ...] for numbers 1 to 10).\nPlot the numbers and their squares on a scatter plot.\n\nMerging Dictionaries:\n\nWrite Python code to merge two dictionaries. If a key is present in both, sum their values.\nExample:\ndict1 = {'a': 10, 'b': 20}\ndict2 = {'b': 5, 'c': 15}\nOutput: {'a': 10, 'b': 25, 'c': 15}\n\nCharacter Frequency:\n\nWrite a function that accepts a string and:\n\nConverts all characters to lowercase.\nCounts the frequency of each character.\nReturns a dictionary with characters as keys and their counts as values.\nVisualize the character frequencies using a bar chart.\n\n\nRemove Duplicates:\n\nWrite a program to remove duplicate elements from a list while maintaining the order of elements.\nCalculate the mean and median of the unique elements.\n\nString Operations:\n\nGiven a list of strings, write a Python function to:\n\nFind the longest string.\nCount how many strings start with a vowel.\nVisualize the distribution of string lengths using a histogram.\n\n\nSorting Dictionaries:\n\nWrite a function to sort a list of dictionaries by a key.\nExample:\ndata = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 22}]\nSort by age → [{'name': 'Bob', 'age': 22}, {'name': 'Alice', 'age': 25}]\n\nWord Filtering and Sorting:\n\nWrite a program to:\n\nSplit a string into a list of words.\nRemove all words that are shorter than 4 characters.\nSort the remaining words alphabetically.\nVisualize the word lengths using a bar chart.\n\n\nAnagram Finder:\n\nWrite a Python function to find all anagrams of a word in a given list.\nInput: word = \"listen\", words = [\"enlist\", \"google\", \"inlets\", \"banana\"]\nOutput: [\"enlist\", \"inlets\"]\n\nSet Operations:\n\nGiven two lists, write Python code to find their intersection, union, and symmetric difference.\nVisualize the results using Venn diagrams.\n\nFile Operations:\n\nWrite Python code to:\n\nCreate a text file.\nWrite a list of numbers to the file (one per line).\nRead the file and compute their sum.\n\n\nWord Count and Frequency:\n\nWrite a program to:\n\nRead a file and count the number of words in it.\nFind the most frequent word.\nVisualize the word frequencies using a bar chart.\n\n\nRandom Number Generation:\n\nWrite a Python program to:\n\nGenerate 100 random integers between 1 and 50.\nSave them in a text file, one per line.\nRead the file and compute the mean of the numbers.\nVisualize the distribution of the numbers using a histogram.\n\n\nCSV File Operations:\n\nWrite Python code to read a CSV file and compute the sum of values in a specific column.\nVisualize the data using a line plot.\n\nBasic Statistics:\n\nWrite Python code to calculate:\n\nMean, median, mode, and standard deviation of a list of numbers.\nVisualize the data using a box plot.\n\n\nNormalization:\n\nWrite a Python function to normalize a list of numbers to a range of 0 to 1.\nVisualize the normalized data using a line plot.\n\nEven or Odd:\n\nWrite a Python program that takes an integer input from the user and prints whether the number is even or odd.\n\nGrade Calculator:\n\nWrite a Python program that takes a numerical grade (0-100) as input and prints the corresponding letter grade (A, B, C, D, F).\n\nLeap Year Checker:\n\nWrite a Python program that takes a year as input and checks if it is a leap year."
  },
  {
    "objectID": "questions.html#python-basics-lists-strings-dictionaries-file-handling-statistics-and-flow-control",
    "href": "questions.html#python-basics-lists-strings-dictionaries-file-handling-statistics-and-flow-control",
    "title": "Prerequisite",
    "section": "",
    "text": "List Operations and Basic Statistics:\n\nCreate a list of the first 20 natural numbers.\nCompute the sum of all even numbers in the list.\nCompute the product of all odd numbers in the list.\nCalculate the mean, median, and standard deviation of the list.\n\nMutable vs. Immutable Data Types:\n\nExplain the difference between mutable and immutable data types in Python. Provide examples of each.\n\nFibonacci Sequence:\n\nWrite a Python function that takes a number n and returns a list of the first n Fibonacci numbers.\nPlot the Fibonacci sequence using a line graph.\n\nList Manipulation:\n\nGiven a list [3, 5, 7, 9, 11, 13]:\n\nInsert 6 at the 3rd index.\nRemove the number 7 from the list.\nReverse the list.\nCalculate the mean and median of the modified list.\n\n\nUser Input and Basic Statistics:\n\nWrite a program to read a comma-separated list of numbers from the user (e.g., “10, 20, 30, 40”).\nCalculate the mean of the numbers.\nIdentify and print the smallest and largest numbers.\nPlot a histogram of the numbers.\n\nPalindrome Check:\n\nWrite a program to check if a string is a palindrome (ignoring spaces and case).\nInput: \"A man a plan a canal Panama\"\nOutput: True\n\nDictionary Operations:\n\nCreate a dictionary of student names (keys) and their marks (values).\nCompute the average marks.\nPrint the names of students scoring above the average.\nVisualize the distribution of marks using a bar chart.\n\nTuple List Creation:\n\nCreate a list of tuples, where each tuple contains a number and its square (e.g., [(1, 1), (2, 4), (3, 9), ...] for numbers 1 to 10).\nPlot the numbers and their squares on a scatter plot.\n\nMerging Dictionaries:\n\nWrite Python code to merge two dictionaries. If a key is present in both, sum their values.\nExample:\ndict1 = {'a': 10, 'b': 20}\ndict2 = {'b': 5, 'c': 15}\nOutput: {'a': 10, 'b': 25, 'c': 15}\n\nCharacter Frequency:\n\nWrite a function that accepts a string and:\n\nConverts all characters to lowercase.\nCounts the frequency of each character.\nReturns a dictionary with characters as keys and their counts as values.\nVisualize the character frequencies using a bar chart.\n\n\nRemove Duplicates:\n\nWrite a program to remove duplicate elements from a list while maintaining the order of elements.\nCalculate the mean and median of the unique elements.\n\nString Operations:\n\nGiven a list of strings, write a Python function to:\n\nFind the longest string.\nCount how many strings start with a vowel.\nVisualize the distribution of string lengths using a histogram.\n\n\nSorting Dictionaries:\n\nWrite a function to sort a list of dictionaries by a key.\nExample:\ndata = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 22}]\nSort by age → [{'name': 'Bob', 'age': 22}, {'name': 'Alice', 'age': 25}]\n\nWord Filtering and Sorting:\n\nWrite a program to:\n\nSplit a string into a list of words.\nRemove all words that are shorter than 4 characters.\nSort the remaining words alphabetically.\nVisualize the word lengths using a bar chart.\n\n\nAnagram Finder:\n\nWrite a Python function to find all anagrams of a word in a given list.\nInput: word = \"listen\", words = [\"enlist\", \"google\", \"inlets\", \"banana\"]\nOutput: [\"enlist\", \"inlets\"]\n\nSet Operations:\n\nGiven two lists, write Python code to find their intersection, union, and symmetric difference.\nVisualize the results using Venn diagrams.\n\nFile Operations:\n\nWrite Python code to:\n\nCreate a text file.\nWrite a list of numbers to the file (one per line).\nRead the file and compute their sum.\n\n\nWord Count and Frequency:\n\nWrite a program to:\n\nRead a file and count the number of words in it.\nFind the most frequent word.\nVisualize the word frequencies using a bar chart.\n\n\nRandom Number Generation:\n\nWrite a Python program to:\n\nGenerate 100 random integers between 1 and 50.\nSave them in a text file, one per line.\nRead the file and compute the mean of the numbers.\nVisualize the distribution of the numbers using a histogram.\n\n\nCSV File Operations:\n\nWrite Python code to read a CSV file and compute the sum of values in a specific column.\nVisualize the data using a line plot.\n\nBasic Statistics:\n\nWrite Python code to calculate:\n\nMean, median, mode, and standard deviation of a list of numbers.\nVisualize the data using a box plot.\n\n\nNormalization:\n\nWrite a Python function to normalize a list of numbers to a range of 0 to 1.\nVisualize the normalized data using a line plot.\n\nEven or Odd:\n\nWrite a Python program that takes an integer input from the user and prints whether the number is even or odd.\n\nGrade Calculator:\n\nWrite a Python program that takes a numerical grade (0-100) as input and prints the corresponding letter grade (A, B, C, D, F).\n\nLeap Year Checker:\n\nWrite a Python program that takes a year as input and checks if it is a leap year."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This webpage contains the course materials for the course “PSDV” that I (Nipun Batra) teach at Indian Institute of Technology, Gandhinagar. These materials have been developed over several years by me and excellent teaching assistants who have helped me in teaching this course."
  },
  {
    "objectID": "notebooks/set.html",
    "href": "notebooks/set.html",
    "title": "Set",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nSet_A = set([1,2,3,4,5,6,7,8,9,10])\nSet_B = set([2,4,6,8,10])\n\n# Union\nUnion = Set_A.union(Set_B)\nprint('Union:', Union)\n\nUnion: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n\n\n# Intersection\nIntersection = Set_A.intersection(Set_B)\nprint('Intersection:', Intersection)\n\nIntersection: {2, 4, 6, 8, 10}\n\n\n\n# Difference\nDifference = Set_A.difference(Set_B)\nprint('Difference:', Difference)\n\nDifference: {1, 3, 5, 7, 9}\n\n\n\nSet_B.difference(Set_A)\n\nset()\n\n\n\nSet_A.issubset(Set_B)\n\nFalse\n\n\n\nSet_B.issubset(Set_A)\n\nTrue\n\n\n\ndef is_subset(set_a, set_b):\n    \"\"\"\n    set_a: set\n    set_b: set\n    ---\n    return: True if set_a is a subset of set_b, False otherwise\n    \"\"\"\n    assert isinstance(set_a, set), 'set_a must be a set'\n    assert isinstance(set_b, set), 'set_b must be a set'\n    \n    # Loop through all elements in set_a and check if they are in set_b\n    subset = True\n    for element in set_a:\n        if element in set_b:\n            continue\n        else:\n            subset = False\n            break\n    return subset\n\n\nis_subset(Set_A, Set_B)\n\nFalse\n\n\n\nis_subset(Set_B, Set_A)\n\nTrue\n\n\n\nSet and Mutability\nIn Python, sets require their elements to be hashable. This is because sets rely on hashing to determine membership and handle uniqueness. Hashable objects must meet two criteria:\n\nImmutability: The object should not change after it is created.\nDefined hash: The object must have a hash value, which is a unique identifier used by Python to store and compare the object in a set or dictionary.\n\nWhy Lists Cannot Be Used in Sets Lists are mutable (i.e., they can be changed after they are created). When you try to use a mutable object like a list as an element in a set, Python raises the TypeError: unhashable type: ‘list’ error. This happens because Python cannot guarantee that the contents of the list won’t change, which would affect its identity and make it unreliable as a key in a set.\n\nset_a = {1}\n\n\nli = [1, 2, 3, 4, 5]\nset_b = {li}\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[23], line 2\n      1 li = [1, 2, 3, 4, 5]\n----&gt; 2 set_b = {li}\n\nTypeError: unhashable type: 'list'\n\n\n\n\nset_c = frozenset(li)\nprint(set_c)\nli.append(6)\nprint(set_c)\n\nfrozenset({1, 2, 3, 4, 5})\nfrozenset({1, 2, 3, 4, 5})\n\n\n\n# List all subsets\noriginal_set = {\"R\", \"G\", \"B\"}\n\noriginal_list = list(original_set)\n\nsubsets = []\n\n\n# Subset of size 0\nsubsets.append([])\nprint(subsets)\n\n# Subset of size 1\nfor element in original_list:\n    subsets.append([element])\nprint(subsets)    \n\n# Subset of size 2\nfor i in range(len(original_list)):\n    for j in range(i+1, len(original_list)):\n        subsets.append([original_list[i], original_list[j]])\nprint(subsets)\n\n# Subset of size 3\nfor i in range(len(original_list)):\n    for j in range(i+1, len(original_list)):\n        for k in range(j+1, len(original_list)):\n            subsets.append([original_list[i], original_list[j], original_list[k]])\nprint(subsets)\n\n[[]]\n[[], ['B'], ['R'], ['G']]\n[[], ['B'], ['R'], ['G'], ['B', 'R'], ['B', 'G'], ['R', 'G']]\n[[], ['B'], ['R'], ['G'], ['B', 'R'], ['B', 'G'], ['R', 'G'], ['B', 'R', 'G']]\n\n\n\nall_subsets = {frozenset(subset) for subset in subsets}\nprint(all_subsets)\n\n{frozenset({'B', 'R', 'G'}), frozenset({'R'}), frozenset({'B', 'G'}), frozenset({'G'}), frozenset({'B', 'R'}), frozenset({'B'}), frozenset({'R', 'G'}), frozenset()}\n\n\n\n# Alternative way to list all subsets\nfrom itertools import combinations\n\noriginal_set = {\"R\", \"G\", \"B\"}\n\nsubsets = []\nfor i in range(len(original_set)+1):\n    subsets += list(combinations(original_set, i))\n    \nall_subsets = {frozenset(subset) for subset in subsets}\nprint(all_subsets)\n\n{frozenset({'B', 'R', 'G'}), frozenset({'R'}), frozenset({'B', 'G'}), frozenset({'G'}), frozenset({'B', 'R'}), frozenset({'B'}), frozenset({'R', 'G'}), frozenset()}\n\n\n\nbin(1)[2:].zfill(3), bin(2)[2:].zfill(3), bin(3)[2:].zfill(3)\n\n('001', '010', '011')\n\n\n\n# Enumerate via binary representation\nimport pandas as pd\noriginal_set = {\"R\", \"G\", \"B\"}\noriginal_list = list(original_set)\n\n# Binary representation of 0 to 2^3-1 in Pandas DataFrame\n\nn = len(original_set)\nbinary = [list(bin(i)[2:].zfill(n)) for i in range(2**n)]\nbinary_df = pd.DataFrame(binary, columns=original_list)\nbinary_df = binary_df.astype(int)\nprint(binary_df)\n\n   B  R  G\n0  0  0  0\n1  0  0  1\n2  0  1  0\n3  0  1  1\n4  1  0  0\n5  1  0  1\n6  1  1  0\n7  1  1  1\n\n\n\nbool_df = binary_df.astype(bool)\nbool_df\n\n\n\n\n\n\n\n\nB\nR\nG\n\n\n\n\n0\nFalse\nFalse\nFalse\n\n\n1\nFalse\nFalse\nTrue\n\n\n2\nFalse\nTrue\nFalse\n\n\n3\nFalse\nTrue\nTrue\n\n\n4\nTrue\nFalse\nFalse\n\n\n5\nTrue\nFalse\nTrue\n\n\n6\nTrue\nTrue\nFalse\n\n\n7\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n\n# Create subsets based on the boolean DataFrame\nsubsets = [np.array(original_list)[row] for row in bool_df.values]\n\n\nsubsets\n\n[array([], dtype='&lt;U1'),\n array(['G'], dtype='&lt;U1'),\n array(['R'], dtype='&lt;U1'),\n array(['R', 'G'], dtype='&lt;U1'),\n array(['B'], dtype='&lt;U1'),\n array(['B', 'G'], dtype='&lt;U1'),\n array(['B', 'R'], dtype='&lt;U1'),\n array(['B', 'R', 'G'], dtype='&lt;U1')]"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html",
    "href": "notebooks/introduction-matplotlib.html",
    "title": "Introduction To Matplotlib",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n%config InlineBackend.figure_format = 'retina'\n\n\nurl = \"https://raw.githubusercontent.com/YashBachwana/ES114-2025--Car-Price-Dataset/refs/heads/main/Car%20Price/CarPrice_Assignment.csv\"\nData = pd.read_csv(url,index_col = 0)\n\n\nData.head()\n\n\n\n\n\n\n\n\nsymboling\nCarName\nfueltype\naspiration\ndoornumber\ncarbody\ndrivewheel\nenginelocation\nwheelbase\ncarlength\n...\nenginesize\nfuelsystem\nboreratio\nstroke\ncompressionratio\nhorsepower\npeakrpm\ncitympg\nhighwaympg\nprice\n\n\ncar_ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n3\nalfa-romero giulia\ngas\nstd\ntwo\nconvertible\nrwd\nfront\n88.6\n168.8\n...\n130\nmpfi\n3.47\n2.68\n9.0\n111\n5000\n21\n27\n13495.0\n\n\n2\n3\nalfa-romero stelvio\ngas\nstd\ntwo\nconvertible\nrwd\nfront\n88.6\n168.8\n...\n130\nmpfi\n3.47\n2.68\n9.0\n111\n5000\n21\n27\n16500.0\n\n\n3\n1\nalfa-romero Quadrifoglio\ngas\nstd\ntwo\nhatchback\nrwd\nfront\n94.5\n171.2\n...\n152\nmpfi\n2.68\n3.47\n9.0\n154\n5000\n19\n26\n16500.0\n\n\n4\n2\naudi 100 ls\ngas\nstd\nfour\nsedan\nfwd\nfront\n99.8\n176.6\n...\n109\nmpfi\n3.19\n3.40\n10.0\n102\n5500\n24\n30\n13950.0\n\n\n5\n2\naudi 100ls\ngas\nstd\nfour\nsedan\n4wd\nfront\n99.4\n176.6\n...\n136\nmpfi\n3.19\n3.40\n8.0\n115\n5500\n18\n22\n17450.0\n\n\n\n\n5 rows × 25 columns"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#data-and-library-import",
    "href": "notebooks/introduction-matplotlib.html#data-and-library-import",
    "title": "Introduction To Matplotlib",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n%config InlineBackend.figure_format = 'retina'\n\n\nurl = \"https://raw.githubusercontent.com/YashBachwana/ES114-2025--Car-Price-Dataset/refs/heads/main/Car%20Price/CarPrice_Assignment.csv\"\nData = pd.read_csv(url,index_col = 0)\n\n\nData.head()\n\n\n\n\n\n\n\n\nsymboling\nCarName\nfueltype\naspiration\ndoornumber\ncarbody\ndrivewheel\nenginelocation\nwheelbase\ncarlength\n...\nenginesize\nfuelsystem\nboreratio\nstroke\ncompressionratio\nhorsepower\npeakrpm\ncitympg\nhighwaympg\nprice\n\n\ncar_ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n3\nalfa-romero giulia\ngas\nstd\ntwo\nconvertible\nrwd\nfront\n88.6\n168.8\n...\n130\nmpfi\n3.47\n2.68\n9.0\n111\n5000\n21\n27\n13495.0\n\n\n2\n3\nalfa-romero stelvio\ngas\nstd\ntwo\nconvertible\nrwd\nfront\n88.6\n168.8\n...\n130\nmpfi\n3.47\n2.68\n9.0\n111\n5000\n21\n27\n16500.0\n\n\n3\n1\nalfa-romero Quadrifoglio\ngas\nstd\ntwo\nhatchback\nrwd\nfront\n94.5\n171.2\n...\n152\nmpfi\n2.68\n3.47\n9.0\n154\n5000\n19\n26\n16500.0\n\n\n4\n2\naudi 100 ls\ngas\nstd\nfour\nsedan\nfwd\nfront\n99.8\n176.6\n...\n109\nmpfi\n3.19\n3.40\n10.0\n102\n5500\n24\n30\n13950.0\n\n\n5\n2\naudi 100ls\ngas\nstd\nfour\nsedan\n4wd\nfront\n99.4\n176.6\n...\n136\nmpfi\n3.19\n3.40\n8.0\n115\n5500\n18\n22\n17450.0\n\n\n\n\n5 rows × 25 columns"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#a-simple-line-plot",
    "href": "notebooks/introduction-matplotlib.html#a-simple-line-plot",
    "title": "Introduction To Matplotlib",
    "section": "A Simple Line Plot",
    "text": "A Simple Line Plot\nA line plot is the most basic type of plot in Matplotlib. It is used to display information as a series of data points connected by straight lines.\n\nSin Wave\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot y = sin(x) on the ax object\nax.plot(x, y)\n\n\n\n\n\n\n\n\n\n\nAdding Label, Title and Grid\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot y = sin(x) on the ax object\nax.plot(x, y)\n\n# Add title and labels\nax.set_title(\"Sine Wave: Basic Plot\")\nax.set_xlabel(\"Time (in seconds)\")\nax.set_ylabel(\"Amplitude\")\n\n# Add grid for better visibility of the plot\nax.grid(True)\n\n\n\n\n\n\n\n\n\n\nsine_series = pd.Series(y, index=x, name=\"Amplitude\")\nsine_series\n\n0.00000     0.000000\n0.10101     0.100838\n0.20202     0.200649\n0.30303     0.298414\n0.40404     0.393137\n              ...   \n9.59596    -0.170347\n9.69697    -0.268843\n9.79798    -0.364599\n9.89899    -0.456637\n10.00000   -0.544021\nName: Amplitude, Length: 100, dtype: float64\n\n\n\n# Plot the sine wave using pandas Series\nax = sine_series.plot(\n    title=\"Sine Wave: Basic Plot\", \n    xlabel=\"Time (in seconds)\", \n    ylabel=\"Amplitude\", \n    grid=True\n)"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#organizing-the-plots",
    "href": "notebooks/introduction-matplotlib.html#organizing-the-plots",
    "title": "Introduction To Matplotlib",
    "section": "Organizing The Plots",
    "text": "Organizing The Plots\n\nMultiple plots on the same figure\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot y = sin(x) on the ax object with label\nax.plot(x, y1, label=\"sin(x)\", color='b')\n\n# Plot y = cos(x) on the ax object with label\nax.plot(x, y2, label=\"cos(x)\",color='r')\n\n# Add title and labels\nax.set_title(\"Sine and Cosine Waves\")\nax.set_xlabel(\"Time (in seconds)\")\nax.set_ylabel(\"Amplitude\")\n\n# Add legend to distinguish the curves\nax.legend(loc=\"upper right\", title=\"Functions\")\n\n# Add grid for better visibility\nax.grid(True)\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\nOther ways to specify colors\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot y = sin(x) on the ax object with label\nax.plot(x, y1, label=\"sin(x)\", color='C0')\n\n# Plot y = cos(x) on the ax object with label\nax.plot(x, y2, label=\"cos(x)\",color='C1')\n\n# Add title and labels\nax.set_title(\"Sine and Cosine Waves\")\nax.set_xlabel(\"Time (in seconds)\")\nax.set_ylabel(\"Amplitude\")\n\n# Add legend to distinguish the curves\nax.legend(loc=\"upper right\")\n\n# Add grid for better visibility\nax.grid(True)\n\n\n\n\n\n\n\n\n\n\nSplitting a figure\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 10, 100)\n\n# Create a figure with 4 subplots arranged in a 2x2 grid\nfig, axes = plt.subplots(2, 2, figsize=(10, 6))  # 2 rows, 2 columns\n\n# First subplot: sin(x)\naxes[0, 0].plot(x, np.sin(x))\naxes[0, 0].set_title(\"sin(x)\")\n\n# Second subplot: cos(x)\naxes[0, 1].plot(x, np.cos(x), color='red')\naxes[0, 1].set_title(\"cos(x)\")\n\n# Third subplot: tan(x)\naxes[1, 0].plot(x, np.tan(x), color='green')\naxes[1, 0].set_title(\"tan(x)\")\n\n# Fourth subplot: exp(-x)\naxes[1, 1].plot(x, np.exp(-x), color='purple')\naxes[1, 1].set_title(\"exp(-x)\")\n\nfig.tight_layout()\n\n\n\n\n\n\n\n\n\n# Above same plot using pandas\n\n# Create a pandas DataFrame with the sine, cosine, and tangent values\ndf = pd.DataFrame({\n    \"sin(x)\": np.sin(x),\n    \"cos(x)\": np.cos(x),\n    \"tan(x)\": np.tan(x),\n    \"exp(-x)\": np.exp(-x)\n}, index=x)\n\ndf\n\n\n\n\n\n\n\n\nsin(x)\ncos(x)\ntan(x)\nexp(-x)\n\n\n\n\n0.00000\n0.000000\n1.000000\n0.000000\n1.000000\n\n\n0.10101\n0.100838\n0.994903\n0.101355\n0.903924\n\n\n0.20202\n0.200649\n0.979663\n0.204814\n0.817078\n\n\n0.30303\n0.298414\n0.954437\n0.312660\n0.738577\n\n\n0.40404\n0.393137\n0.919480\n0.427564\n0.667617\n\n\n...\n...\n...\n...\n...\n\n\n9.59596\n-0.170347\n-0.985384\n0.172874\n0.000068\n\n\n9.69697\n-0.268843\n-0.963184\n0.279119\n0.000061\n\n\n9.79798\n-0.364599\n-0.931165\n0.391551\n0.000056\n\n\n9.89899\n-0.456637\n-0.889653\n0.513276\n0.000050\n\n\n10.00000\n-0.544021\n-0.839072\n0.648361\n0.000045\n\n\n\n\n100 rows × 4 columns\n\n\n\n\n# Create a figure with 4 subplots arranged in a 2x2 grid\nfig, axes = plt.subplots(2, 2, figsize=(10, 6))  # 2 rows, 2 columns\n\n# Plot each column of the DataFrame on a separate subplot\ndf[\"sin(x)\"].plot(ax=axes[0, 0], color='blue', title=\"sin(x)\")\ndf[\"cos(x)\"].plot(ax=axes[0, 1], color='red', title=\"cos(x)\")\ndf[\"tan(x)\"].plot(ax=axes[1, 0], color='green', title=\"tan(x)\")\ndf[\"exp(-x)\"].plot(ax=axes[1, 1], color='purple', title=\"exp(-x)\")\n\nfig.tight_layout()\n\n\n\n\n\n\n\n\n\n# Above same plot using pandas\n\n# Create a pandas DataFrame with the sine, cosine, and tangent values\ndf = pd.DataFrame({\n    \"sin(x)\": np.sin(x),\n    \"cos(x)\": np.cos(x),\n    \"tan(x)\": np.tan(x),\n    \"exp(-x)\": np.exp(-x)\n}, index=x)\n\nfig, axes = plt.subplots(2, 2, figsize=(10, 6))\n\ndf.plot(subplots=True, ax=axes, figsize=(10, 6),\n         title=[\"sin(x)\", \"cos(x)\", \"tan(x)\", \"exp(-x)\"]\n         ,legend=False)\n\nfig.tight_layout()\n\n\n\n\n\n\n\n\n\nfig, axes = plt.subplots(2, 2, figsize=(10, 6))\n\ndf.plot(subplots=True, ax=axes, figsize=(10, 6),\n         title=[\"sin(x)\", \"cos(x)\", \"tan(x)\", \"exp(-x)\"]\n         ,legend=False)\n\n\n# Add super title to the figure\nfig.suptitle(\"Trigonometric Functions and Exponential Decay\", fontsize=20)\n\nfig.tight_layout()\n\n\n\n\n\n\n\n\n\n\nTweaking\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Daily temperature variations (in °C) over a week\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\ncity_a = [22, 24, 23, 25, 26, 27, 28]  # City A temperatures\ncity_b = [18, 19, 20, 21, 22, 21, 20]  # City B temperatures\ncity_c = [30, 31, 32, 33, 34, 35, 36]  # City C temperatures\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot trends with customizations\nax.plot(days, city_a, color='blue', linestyle='-', linewidth=2, marker='o', label='City A')\nax.plot(days, city_b, color='green', linestyle='--', linewidth=2, marker='s', label='City B')\nax.plot(days, city_c, color='red', linestyle='-.', linewidth=2, marker='^', label='City C')\n\n# Add title and labels\nax.set_title(\"Temperature Trends Over a Week\", fontsize=16)\nax.set_xlabel(\"Day of the Week\", fontsize=14)\nax.set_ylabel(\"Temperature (°C)\", fontsize=14)\n\n# Customize ticks\nax.set_xticks(days)  # Use day names for x-axis\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Add legend\nax.legend(fontsize=12, title=\"Cities\")\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Display the plot\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n# Create a pandas DataFrame\ndata = pd.DataFrame({\n    \"Day\": days,\n    \"City A\": city_a,\n    \"City B\": city_b,\n    \"City C\": city_c\n})\n\n# Define a list of markers\nmarkers = [\"o\", \"s\", \"^\"]\n\n# Plot in one go\nax = data.plot(\n    x=\"Day\",\n    y=[\"City A\", \"City B\", \"City C\"],\n    figsize=(10, 6),\n    linestyle=\"-\",\n    linewidth=2,\n    title=\"Temperature Trends Over a Week\",\n    xlabel=\"Day of the Week\",\n    ylabel=\"Temperature (°C)\"\n)\n\n# Apply markers\nfor line, marker in zip(ax.lines, markers):\n    line.set_marker(marker)\n\n# Customize legend\nax.legend(fontsize=12, title=\"Cities\")\n\n# Customize grid and ticks\nax.grid(True, linestyle=\"--\", alpha=0.6)\nax.tick_params(axis=\"both\", which=\"major\", labelsize=12)\n\n\n\n\n\n\n\n\n\n\nLimits and Ticks\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Hypothetical temperature data (in °C) for 24 hours\nhours = np.arange(24)  # Hours from 0 to 23\ntemperature = [12, 11, 10, 9, 9, 8, 8, 10, 14, 18, 22, 25, 27, 29, 28, 26, 23, 21, 18, 16, 15, 14, 13, 12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the temperature data\nax.plot(hours, temperature, marker='o', color='orange', label='Temperature (°C)')\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Hypothetical temperature data (in °C) for 24 hours\nhours = np.arange(24)  # Hours from 0 to 23\ntemperature = [12, 11, 10, 9, 9, 8, 8, 10, 14, 18, 22, 25, 27, 29, 28, 26, 23, 21, 18, 16, 15, 14, 13, 12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the temperature data\nax.plot(hours, temperature, marker='o', color='orange', label='Temperature (°C)')\n\n# Add title and labels\nax.set_title(\"Hourly Temperature Variations\", fontsize=16)\nax.set_xlabel(\"Hour of the Day\", fontsize=14)\nax.set_ylabel(\"Temperature (°C)\", fontsize=14)\n\n# Modify axis limits to focus on the specific hours and temperature range\nax.set_xlim(6, 18)  # Focus on hours 6 AM to 6 PM\nax.set_ylim(15, 30)  # Focus on the relevant temperature range\n\n# Customize ticks\nax.set_xticks(range(6, 19, 2))  # Show ticks every 2 hours in the focused range\nax.set_xticklabels([f\"{h} AM\" if h &lt; 12 else f\"{h-12} PM\" for h in range(6, 19, 2)])  # Format as AM/PM\nax.set_yticks(range(15, 31, 5))  # Show y-axis ticks every 5°C\n\n# Add gridlines for better visibility\nax.grid(which='both', axis='both', linestyle='--', alpha=0.6)\n\n# Add legend\nax.legend(fontsize=12, loc='upper left')\n\n# Display the plot\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#saving-the-plots",
    "href": "notebooks/introduction-matplotlib.html#saving-the-plots",
    "title": "Introduction To Matplotlib",
    "section": "Saving The Plots",
    "text": "Saving The Plots\n\n# Save the plot as a PNG file\nfig.savefig(\"temperature_variations.png\", dpi=300, bbox_inches='tight')\n\n# Save the plot as a PDF file\nfig.savefig(\"temperature_variations.pdf\", dpi=300, bbox_inches='tight')\n\n# Save the plot as an SVG file\nfig.savefig(\"temperature_variations.svg\", dpi=300, bbox_inches='tight')"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#choose-your-plot",
    "href": "notebooks/introduction-matplotlib.html#choose-your-plot",
    "title": "Introduction To Matplotlib",
    "section": "Choose Your Plot",
    "text": "Choose Your Plot\n\nBar Plot\nUsed for categorical or discrete data to compare counts or summarized values.\n\n# Count occurrences of each fuel type\nfueltype_counts = Data['carbody'].value_counts()\nfueltype_counts\n\ncarbody\nsedan          96\nhatchback      70\nwagon          25\nhardtop         8\nconvertible     6\nName: count, dtype: int64\n\n\n\n\n\n# Parameters for bar color and width\nbar_color = ['skyblue']  # Example color list, you can change it to any color you prefer\nbar_width = 0.6\n\nfig, ax = plt.subplots(figsize=(8, 6))\nax.bar(fueltype_counts.index, fueltype_counts.values, color=bar_color, width=bar_width)\n\nax.set_title('Distribution of Car Body', fontsize=16)\n#ax.set_xlabel('Car Body', fontsize=14)\n#ax.set_ylabel('Count', fontsize=14)\n#ax.set_xticks(range(len(fueltype_counts.index)))\n#ax.set_xticklabels(fueltype_counts.index, fontsize=12)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# In pandas\nfueltype_counts.plot(kind='bar', color='skyblue', \n                     figsize=(8, 6),\n                     xlabel='Car Body', ylabel='Count'\n                     , title='Distribution of Car Body')\n\n\n\n\n\n\n\n\n\n\nAnnotations\n\n# Count occurrences of each fuel type\nfueltype_counts = Data['carbody'].value_counts()\n\n# Parameters for bar color and width\nbar_color = ['skyblue']  # Example color list, you can change it to any color you prefer\nbar_width = 0.6\n\nfig, ax = plt.subplots(figsize=(8, 6))\nbars = ax.bar(fueltype_counts.index, fueltype_counts.values, color=bar_color, width=bar_width)\n\n# Add annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width() / 2, yval + 1,  # Position the text above the bar\n            round(yval, 2),  # Display the count value (rounded to 2 decimal places)\n            ha='center', va='bottom', fontsize=12)  # Align text at the center of the bar and just above it\n\nax.set_title('Distribution of Car Body', fontsize=16)\nax.set_xlabel('Car Body', fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_xticks(range(len(fueltype_counts.index)))\nax.set_xticklabels(fueltype_counts.index, fontsize=12)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot the bar chart\nax = fueltype_counts.plot(\n    kind='bar', \n    color='skyblue', \n    figsize=(8, 6), \n    rot=0, \n    xlabel='Car Body', \n    ylabel='Count', \n    title='Distribution of Car Body'\n)\n\n# Annotate the bars\nfor bar in ax.patches:\n    # Get the height of the bar (count value)\n    bar_height = bar.get_height()\n    # Annotate the bar with its value\n    ax.annotate(\n        f'{bar_height}',  # Annotation text\n        xy=(bar.get_x() + bar.get_width() / 2, bar_height),  # Position above bar\n        xytext=(0, 5),  # Offset for the annotation\n        textcoords='offset points',\n        ha='center', \n        fontsize=10\n    )\n\n# Adjust layout and show the plot\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\nScatterplot\nUsed for bivariate data to examine relationships or correlations between two continuous variables.\n\nx = Data['horsepower']\ny = Data['price']\n\n# Create the scatter plot\nfig, ax = plt.subplots(figsize=(8, 6))\nax.scatter(x, y, color='blue', alpha=0.7)\n\nax.set_title('Horsepower vs. Car Price', fontsize=16)\nax.set_xlabel('Horsepower', fontsize=14)\nax.set_ylabel('Price ($)', fontsize=14)\n\nax.grid(True)\n\n\n\n\n\n\n\n\n\nData\n\n\n\n\n\n\n\n\nsymboling\nCarName\nfueltype\naspiration\ndoornumber\ncarbody\ndrivewheel\nenginelocation\nwheelbase\ncarlength\n...\nenginesize\nfuelsystem\nboreratio\nstroke\ncompressionratio\nhorsepower\npeakrpm\ncitympg\nhighwaympg\nprice\n\n\ncar_ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n3\nalfa-romero giulia\ngas\nstd\ntwo\nconvertible\nrwd\nfront\n88.6\n168.8\n...\n130\nmpfi\n3.47\n2.68\n9.0\n111\n5000\n21\n27\n13495.0\n\n\n2\n3\nalfa-romero stelvio\ngas\nstd\ntwo\nconvertible\nrwd\nfront\n88.6\n168.8\n...\n130\nmpfi\n3.47\n2.68\n9.0\n111\n5000\n21\n27\n16500.0\n\n\n3\n1\nalfa-romero Quadrifoglio\ngas\nstd\ntwo\nhatchback\nrwd\nfront\n94.5\n171.2\n...\n152\nmpfi\n2.68\n3.47\n9.0\n154\n5000\n19\n26\n16500.0\n\n\n4\n2\naudi 100 ls\ngas\nstd\nfour\nsedan\nfwd\nfront\n99.8\n176.6\n...\n109\nmpfi\n3.19\n3.40\n10.0\n102\n5500\n24\n30\n13950.0\n\n\n5\n2\naudi 100ls\ngas\nstd\nfour\nsedan\n4wd\nfront\n99.4\n176.6\n...\n136\nmpfi\n3.19\n3.40\n8.0\n115\n5500\n18\n22\n17450.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n201\n-1\nvolvo 145e (sw)\ngas\nstd\nfour\nsedan\nrwd\nfront\n109.1\n188.8\n...\n141\nmpfi\n3.78\n3.15\n9.5\n114\n5400\n23\n28\n16845.0\n\n\n202\n-1\nvolvo 144ea\ngas\nturbo\nfour\nsedan\nrwd\nfront\n109.1\n188.8\n...\n141\nmpfi\n3.78\n3.15\n8.7\n160\n5300\n19\n25\n19045.0\n\n\n203\n-1\nvolvo 244dl\ngas\nstd\nfour\nsedan\nrwd\nfront\n109.1\n188.8\n...\n173\nmpfi\n3.58\n2.87\n8.8\n134\n5500\n18\n23\n21485.0\n\n\n204\n-1\nvolvo 246\ndiesel\nturbo\nfour\nsedan\nrwd\nfront\n109.1\n188.8\n...\n145\nidi\n3.01\n3.40\n23.0\n106\n4800\n26\n27\n22470.0\n\n\n205\n-1\nvolvo 264gl\ngas\nturbo\nfour\nsedan\nrwd\nfront\n109.1\n188.8\n...\n141\nmpfi\n3.78\n3.15\n9.5\n114\n5400\n19\n25\n22625.0\n\n\n\n\n205 rows × 25 columns\n\n\n\n\nData.plot.scatter(x='horsepower', y='price', color='blue', alpha=0.7, figsize=(8, 6),\n                    title='Horsepower vs. Car Price', xlabel='Horsepower', ylabel='Price ($)', grid=True)\n\n\n\n\n\n\n\n\n\n\nPie Chart\nUsed for proportional or compositional data to represent parts of a whole\n\n# Count occurrences of each fuel type\nfueltype_counts = Data['carbody'].value_counts()\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nsizes = fueltype_counts.values\nlabels = fueltype_counts.index\ncolors = ['gold', 'lightblue', 'lightgreen', 'pink','lightgrey']  # Adjust colors as needed\n\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\nax.set_title(\"Distribution of Car Fuel Types\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# Pie in pandas\nfueltype_counts.plot(kind='pie', figsize=(8, 6), autopct='%1.1f%%', startangle=140,\n                     title='Distribution of Car Fuel Types', colors=['gold', 'lightblue', 'lightgreen', 'pink','lightgrey'])\n\n\n\n\n\n\n\n\n\n\nHistogram\nUsed for univariate continuous data to visualize frequency distribution.\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\ndata = Data['price']\n\nax.hist(data, bins=40, color='skyblue', edgecolor='black')\n\nax.set_title('Histogram of Price', fontsize=16)\nax.set_xlabel('Price ($)', fontsize=14)\nax.set_ylabel('Frequency', fontsize=14)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# In pandas\nData['price'].plot(kind='hist', bins=20, color='skyblue', edgecolor='black',\n                   figsize=(8, 6), title='Histogram of Price', xlabel='Price ($)', ylabel='Frequency')\n\n\n\n\n\n\n\n\n\n\nErrorbar\nUsed for data with measurements from multiple experiments, showing variability or uncertainty, often from multiple experiments.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Simulate a physics experiment: Measuring spring constant (k) at different masses\n# Each mass is measured multiple times to account for experimental uncertainty\n\n# Create sample data\nmasses = np.array([50, 100, 150, 200, 250])  # mass in grams\nnum_trials = 10\n\n# Simulate multiple measurements for each mass\n# Each measurement has some random variation to simulate real experimental conditions\nmeasurements = []\nfor mass in masses:\n    # Simulate spring constant measurements with some random noise\n    # True k = 10 N/m with measurement errors\n    k_measurements = 10 + np.random.normal(0, 0.5, num_trials)\n    measurements.append(k_measurements)\n\nmeasurements\n\n[array([ 9.60059384,  9.15385593, 10.28497197,  9.85293433, 10.02889485,\n        10.34334378,  9.08639395,  9.82668512,  9.7685277 ,  9.4138344 ]),\n array([ 9.51136846, 11.50160258, 10.15063726, 10.8276022 ,  8.97931269,\n        10.13273831, 10.38841646,  8.64112354, 10.33124531, 10.69226999]),\n array([10.26489637,  9.81086493, 10.65842485,  9.47632847,  9.2579158 ,\n         9.60256365, 10.60278096,  9.38020745, 10.54828873, 10.95357033]),\n array([10.10126388, 10.76131134, 10.30305548,  9.50037411,  9.24211105,\n        10.82680171,  9.91489558,  9.66617419, 10.18283327,  9.85033258]),\n array([10.18823263, 10.01292153, 10.57612678,  9.92321915, 10.25308004,\n        10.6656051 , 10.08219377,  9.35058485, 11.04976976,  9.32749305])]\n\n\n\n# Calculate means and standard errors\nmeans = [np.mean(m) for m in measurements]\nerrors = [np.std(m) / np.sqrt(num_trials) for m in measurements]  # Standard error of the mean\n\n# Create the error bar plot\nfig, ax = plt.subplots(figsize=(10, 6))\n\nax.errorbar(masses, means, yerr=errors, fmt='o',\n            color='blue', ecolor='black',\n            capsize=5, capthick=1.5,\n            label='Measured Values')\n\n# Add true value line\nax.axhline(y=10, color='r', linestyle='--', label='True Spring Constant')\n\nax.set_title('Spring Constant Measurements vs Mass', fontsize=12)\nax.set_xlabel('Mass (g)', fontsize=10)\nax.set_ylabel('Spring Constant (N/m)', fontsize=10)\nax.grid(True, linestyle='--', alpha=0.7)\nax.legend()\n\n\n\n\n\n\n\n\n\n\ndf = pd.DataFrame(measurements, index=masses).T\ndf\n\n\n\n\n\n\n\n\n50\n100\n150\n200\n250\n\n\n\n\n0\n9.600594\n9.511368\n10.264896\n10.101264\n10.188233\n\n\n1\n9.153856\n11.501603\n9.810865\n10.761311\n10.012922\n\n\n2\n10.284972\n10.150637\n10.658425\n10.303055\n10.576127\n\n\n3\n9.852934\n10.827602\n9.476328\n9.500374\n9.923219\n\n\n4\n10.028895\n8.979313\n9.257916\n9.242111\n10.253080\n\n\n5\n10.343344\n10.132738\n9.602564\n10.826802\n10.665605\n\n\n6\n9.086394\n10.388416\n10.602781\n9.914896\n10.082194\n\n\n7\n9.826685\n8.641124\n9.380207\n9.666174\n9.350585\n\n\n8\n9.768528\n10.331245\n10.548289\n10.182833\n11.049770\n\n\n9\n9.413834\n10.692270\n10.953570\n9.850333\n9.327493\n\n\n\n\n\n\n\n\n\nBoxplot\nUsed for univariate or grouped data to summarize distributions and highlight outliers.\n\nimport matplotlib.pyplot as plt\n\n# Create a boxplot to compare price distribution by car body type\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the boxplot\nData.boxplot(column='price', by='carbody', ax=ax, grid=False, patch_artist=True,\n             boxprops=dict(facecolor='lightblue', color='blue'),\n             whiskerprops=dict(color='blue'),\n             medianprops=dict(color='red', linewidth=2))\n\nax.set_title(\"Price Distribution by Car Body Type\", fontsize=16)\nax.set_xlabel(\"Car Body Type\", fontsize=14)\nax.set_ylabel(\"Price (USD)\", fontsize=14)\nplt.suptitle(\"\")  # This is to remove the default title\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#scale-transformations",
    "href": "notebooks/introduction-matplotlib.html#scale-transformations",
    "title": "Introduction To Matplotlib",
    "section": "Scale Transformations",
    "text": "Scale Transformations\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#exponential growth\nx = np.linspace(1, 100, 500)\ny = np.exp(x / 20)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\n# Plot with normal scale\nax1.plot(x, y, label=\"Exponential Growth\", color=\"blue\")\nax1.set_title(\"Normal Scale\")\nax1.set_xlabel(\"X-axis\")\nax1.set_ylabel(\"Y-axis\")\nax1.legend()\nax1.grid(True)\n\n# Plot with log scale (Y-axis)\nax2.plot(x, y, label=\"Exponential Growth\", color=\"green\")\nax2.set_yscale(\"log\")\nax2.set_title(\"Logarithmic Scale (Y-axis)\")\nax2.set_xlabel(\"X-axis\")\nax2.set_ylabel(\"Log(Y-axis)\")\nax2.legend()\nax2.grid(True, which=\"both\", linestyle=\"--\", linewidth=0.5)"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#d-visualization-and-contour",
    "href": "notebooks/introduction-matplotlib.html#d-visualization-and-contour",
    "title": "Introduction To Matplotlib",
    "section": "3D Visualization And Contour",
    "text": "3D Visualization And Contour\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create grid for paraboloid\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\n\nX, Y = np.meshgrid(x,y)\n\n\npd.DataFrame(X)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n\n\n\n0\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n1\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n2\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n3\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n4\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n95\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n96\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n97\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n98\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n99\n-10.0\n-9.79798\n-9.59596\n-9.393939\n-9.191919\n-8.989899\n-8.787879\n-8.585859\n-8.383838\n-8.181818\n...\n8.181818\n8.383838\n8.585859\n8.787879\n8.989899\n9.191919\n9.393939\n9.59596\n9.79798\n10.0\n\n\n\n\n100 rows × 100 columns\n\n\n\n\npd.DataFrame(Y)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n\n\n\n0\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n...\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n-10.000000\n\n\n1\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n...\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n-9.797980\n\n\n2\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n...\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n-9.595960\n\n\n3\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n...\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n-9.393939\n\n\n4\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n...\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n-9.191919\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n95\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n...\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n9.191919\n\n\n96\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n...\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n9.393939\n\n\n97\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n...\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n9.595960\n\n\n98\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n...\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n9.797980\n\n\n99\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n...\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n10.000000\n\n\n\n\n100 rows × 100 columns\n\n\n\n\nZ = X**2 + Y**2\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\nsurface = ax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Add labels and title\nax.set_title('3D Plot of Paraboloid', fontsize=16)\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\nax.set_zlabel('Z-axis', fontsize=12)\n\nfig.colorbar(surface,pad=0.1)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create grid for paraboloid\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\n\nX, Y = np.meshgrid(x, y)\n\nZ = X**2 + Y**2\n\n# Create figure and subplots\nfig, axs = plt.subplots(1, 2, figsize=(14, 6))\n\n# 3D Plot\nax1 = fig.add_subplot(121, projection='3d')\nsurface = ax1.plot_surface(X, Y, Z, cmap='viridis')\nax1.set_title('3D Plot of Paraboloid', fontsize=16)\nax1.set_xlabel('X-axis', fontsize=12)\nax1.set_ylabel('Y-axis', fontsize=12)\nax1.set_zlabel('Z-axis', fontsize=12)\n\n\n# 2D Contour Plot\nax2 = axs[1]\ncontour = ax2.contourf(X, Y, Z, levels=20, cmap='viridis')\nax2.set_title('2D Contour Plot of Paraboloid', fontsize=16)\nax2.set_xlabel('X-axis', fontsize=12)\nax2.set_ylabel('Y-axis', fontsize=12)\nfig.colorbar(contour, ax=ax2, pad=0.1)\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/introduction-matplotlib.html#using-imshow-for-image-like-data",
    "href": "notebooks/introduction-matplotlib.html#using-imshow-for-image-like-data",
    "title": "Introduction To Matplotlib",
    "section": "Using Imshow for Image-Like Data",
    "text": "Using Imshow for Image-Like Data\nimshow is crucial for displaying 2D data as color-coded images. It’s commonly used for heatmaps, matrices, and actual images.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create sample data\ndata = np.random.rand(10, 10)\n\npd.DataFrame(data)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n0\n0.490860\n0.929045\n0.572919\n0.964711\n0.980014\n0.186145\n0.427508\n0.608805\n0.893498\n0.695284\n\n\n1\n0.966428\n0.422390\n0.348150\n0.525304\n0.331108\n0.580977\n0.562608\n0.560270\n0.939938\n0.808085\n\n\n2\n0.021255\n0.326444\n0.765063\n0.515920\n0.515554\n0.121355\n0.830749\n0.594427\n0.062847\n0.371122\n\n\n3\n0.222631\n0.762149\n0.229365\n0.335383\n0.635986\n0.205019\n0.852074\n0.897168\n0.055277\n0.186129\n\n\n4\n0.987063\n0.835088\n0.654150\n0.181315\n0.012669\n0.086974\n0.903000\n0.829740\n0.716490\n0.834996\n\n\n5\n0.180575\n0.426452\n0.881832\n0.496820\n0.524836\n0.539941\n0.650598\n0.490325\n0.337512\n0.901674\n\n\n6\n0.752542\n0.284082\n0.979989\n0.957409\n0.929105\n0.480490\n0.818328\n0.123510\n0.564911\n0.189244\n\n\n7\n0.992347\n0.311162\n0.411070\n0.600753\n0.495184\n0.069100\n0.372265\n0.431248\n0.456604\n0.238691\n\n\n8\n0.258555\n0.691445\n0.463634\n0.021314\n0.333122\n0.435857\n0.207976\n0.866270\n0.231009\n0.749924\n\n\n9\n0.905349\n0.911525\n0.675188\n0.804228\n0.966661\n0.572587\n0.021375\n0.688160\n0.815374\n0.508309\n\n\n\n\n\n\n\n\n\n\n# Basic imshow example\nfig, ax = plt.subplots(figsize=(8, 6))\nim = ax.imshow(data, cmap='viridis')\nfig.colorbar(im, ax=ax)\nax.set_title('Basic imshow example')\n\n# Multiple imshow with different interpolations\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\nim1 = ax1.imshow(data, interpolation='nearest', cmap='coolwarm')\nax1.set_title('nearest interpolation')\nfig.colorbar(im1, ax=ax1)\n\nim2 = ax2.imshow(data, interpolation='bilinear', cmap='coolwarm')\nax2.set_title('bilinear interpolation')\nfig.colorbar(im2, ax=ax2)\nfig.tight_layout()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Advanced Plot Features\n##Custom Markers and Lines\nWhat are Custom Markers and Lines?\nMarkers and lines are elements used in plots to differentiate data points and highlight trends. Matplotlib allows customization of their shapes, colors, and styles to make plots more informative and visually appealing.\n\nCustomizing Markers\n- Markers represent individual data points on a plot.\n- Use the marker parameter in plotting functions.\nCommon Marker Options:\n- 'o': Circle\n- 's': Square\n- '^': Triangle up\n- 'x': Cross\n- '*': Star\n- '.': Point\n\nx = np.linspace(0, 10, 50)\ny = np.sin(x)\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(x, y, 'o-', label='Default')\nax.plot(x, y + 1, 'D--', markersize=2, label='Diamond markers')\nax.plot(x, y - 1, 's:', markerfacecolor='red',\n        markeredgecolor='black', label='Square markers')\nax.legend()\nax.set_title('Custom Markers and Lines')\n\nText(0.5, 1.0, 'Custom Markers and Lines')\n\n\n\n\n\n\n\n\n\n\nfill_between: Highlighting Areas in Plots\nWhat is fill_between?\nThe fill_between function in Matplotlib is used to fill the area between two curves or between a curve and a horizontal line.\nWhere to Use:\n- To visually emphasize the range of values or uncertainty in data.\n- To highlight areas under a curve or between curves.\nWhy Use fill_between?\n- Makes plots more intuitive by shading regions of interest.\n- Helps in representing data variability, confidence intervals, or integrals.\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.fill_between(x, y - 0.2, y + 0.2, alpha=0.1, color='red')\nax.plot(x, y, 'r-', label='Main line')\nax.set_title('Fill Between Example')\nax.legend()\n\n\n\n\n\n\n\n\n#Stylesheets\nWhat are Stylesheets?\nMatplotlib stylesheets are pre-defined sets of style parameters that help you create visually appealing and consistent plots.\nWhere to Use:\n- Use stylesheets when you want your plots to have a cohesive appearance across a project or to match a publication’s style guide.\nWhy Use Stylesheets?\n- Simplify customization by applying a uniform theme with a single line of code.\n- Save time and maintain consistency in multi-plot projects.\n\n# List available styles\nprint(plt.style.available)\n\n['Solarize_Light2', '_classic_test_patch', '_mpl-gallery', '_mpl-gallery-nogrid', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn-v0_8', 'seaborn-v0_8-bright', 'seaborn-v0_8-colorblind', 'seaborn-v0_8-dark', 'seaborn-v0_8-dark-palette', 'seaborn-v0_8-darkgrid', 'seaborn-v0_8-deep', 'seaborn-v0_8-muted', 'seaborn-v0_8-notebook', 'seaborn-v0_8-paper', 'seaborn-v0_8-pastel', 'seaborn-v0_8-poster', 'seaborn-v0_8-talk', 'seaborn-v0_8-ticks', 'seaborn-v0_8-white', 'seaborn-v0_8-whitegrid', 'tableau-colorblind10']\n\n\n\n\n\n# Example using different styles\ndata = np.random.randn(1000)\nstyles = ['default', 'seaborn-v0_8-bright', 'dark_background', 'seaborn-v0_8-dark-palette']\n\n# Create separate figures for each style\nfig = plt.figure(figsize=(15, 10))\nfor idx, style in enumerate(styles):\n    with plt.style.context(style):\n        ax = fig.add_subplot(2, 2, idx + 1)\n        ax.hist(data, bins=30)\n        ax.set_title(f'Style: {style}')\nfig.tight_layout()"
  },
  {
    "objectID": "notebooks/intro-numpy.html",
    "href": "notebooks/intro-numpy.html",
    "title": "Introduction to NumPy",
    "section": "",
    "text": "import numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# config retina mode\n%config InlineBackend.figure_format = 'retina'\n\n\nimg_path = \"../datasets/images/street.jpg\"\nimg = Image.open(img_path)\n\n\nimg_array = np.array(img).astype(np.uint8)\n\n\nplt.imshow(img_array)\n# remove axis\n_ = plt.axis('off')\n\n\n\n\n\n\n\n\n\nimg_array\n\narray([[[ 48,  51,  56],\n        [ 41,  44,  49],\n        [ 31,  34,  39],\n        ...,\n        [153, 154, 149],\n        [129, 125, 116],\n        [120, 112, 101]],\n\n       [[ 47,  50,  55],\n        [ 41,  44,  49],\n        [ 30,  33,  38],\n        ...,\n        [151, 152, 147],\n        [126, 122, 113],\n        [117, 109,  98]],\n\n       [[ 46,  49,  54],\n        [ 39,  42,  47],\n        [ 29,  32,  37],\n        ...,\n        [147, 148, 143],\n        [121, 117, 108],\n        [113, 105,  94]],\n\n       ...,\n\n       [[ 80,  93,  99],\n        [ 85,  98, 104],\n        [ 91, 104, 110],\n        ...,\n        [ 83,  88,  92],\n        [ 85,  90,  94],\n        [ 88,  93,  97]],\n\n       [[ 69,  80,  86],\n        [ 75,  86,  92],\n        [ 82,  93,  99],\n        ...,\n        [ 86,  94,  97],\n        [ 86,  94,  97],\n        [ 87,  95,  98]],\n\n       [[ 58,  65,  75],\n        [ 64,  71,  81],\n        [ 73,  80,  90],\n        ...,\n        [ 90,  98, 101],\n        [ 88,  96,  99],\n        [ 88,  96,  99]]], dtype=uint8)\n\n\n\nimg_array.shape\n\n(2000, 3000, 3)\n\n\n\nimg_array.dtype\n\ndtype('uint8')\n\n\n\n# rotate image by 90 degrees\nrotated_img_array = np.rot90(img_array)\n\nplt.imshow(rotated_img_array.astype(np.uint8))\nplt.axis('off')\n\n\n\n\n\n\n\n\n\n# 0, 0 th pixel\nimg_array[0, 0]\n\narray([48, 51, 56], dtype=uint8)\n\n\n\n# Increase R value of first quarter to max\nnew_img = img_array.copy()\nnew_img[:new_img.shape[0]//2, :new_img.shape[1]//2, 0] = 255\n\nplt.imshow(new_img)\nplt.axis('off')\n\n\n\n\n\n\n\n\n\n%pip install pydub -q\n\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n# load audio\nfrom email.mime import audio\nfrom pydub import AudioSegment\naudio_path = \"../datasets/audio/pm-answer.mp3\"\n\n\naudio = AudioSegment.from_file(audio_path)\n\n\naudio\n\n\n                    \n                        \n                        Your browser does not support the audio element.\n                    \n                  \n\n\n\naudio_arr = np.array(audio.get_array_of_samples())\n\n\naudio_arr\n\narray([0, 0, 0, ..., 0, 0, 0], dtype=int16)\n\n\n\nplt.plot(audio_arr)\nplt.xlabel('Sample')\nplt.ylabel('Amplitude')\n\nText(0, 0.5, 'Amplitude')\n\n\n\n\n\n\n\n\n\n\naudio_arr.shape\n\n(82368,)\n\n\n\naudio.frame_rate\n\n24000\n\n\n\n# Convert plot to time as x-axis\ntime = np.linspace(0, len(audio_arr) / audio.frame_rate, num=len(audio_arr))\n\nplt.plot(time, audio_arr)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\n\nText(0, 0.5, 'Amplitude')\n\n\n\n\n\n\n\n\n\n\n# Add a smoothing effect\nfrom scipy.signal import savgol_filter\n\nsmoothed_audio_arr = savgol_filter(audio_arr, 51, 3)\n\nplt.plot(time, smoothed_audio_arr)\n\n\n\n\n\n\n\n\n\nfrom IPython.display import Audio\nAudio(audio_arr, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nAudio(smoothed_audio_arr, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Sample text data\ndocuments = [\n    \"The quick brown fox jumps over the lazy dog\",\n    \"Never jump over the lazy dog quickly\"\n]\n\n# Convert text to a bag-of-words representation\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(documents)\n\nprint(\"Feature names:\", vectorizer.get_feature_names_out())\nprint(\"Bag-of-words representation:\\n\", X.toarray())\n\nFeature names: ['brown' 'dog' 'fox' 'jump' 'jumps' 'lazy' 'never' 'over' 'quick'\n 'quickly' 'the']\nBag-of-words representation:\n [[1 1 1 0 1 1 0 1 1 0 2]\n [0 1 0 1 0 1 1 1 0 1 1]]\n\n\nWhy not use Python lists instead of NumPy arrays?\n\nimport time\n\nn_nums = 10000000\n# Using a Python list\nlst = list(range(n_nums))\nstart = time.time()\nlst_squared = [x**2 for x in lst]\nend = time.time()\nprint(f\"Python list computation time: {end - start: .2f} seconds\")\n\n# Using a NumPy array\narr = np.arange(n_nums)\nstart = time.time()\narr_squared = arr ** 2\nend = time.time()\nprint(f\"NumPy array computation time: {end - start: .2f} seconds\")\n\nPython list computation time:  0.21 seconds\nNumPy array computation time:  0.01 seconds\n\n\n\nImport & Version Check\n\nimport numpy as np\nprint(\"Using NumPy version:\", np.__version__)\n\nUsing NumPy version: 2.1.2\n\n\n\n\n\nNumPy arrays can come from Python lists or built-in functions.\n\n# From a Python list\npy_list = [1, 2, 3, 4]\narr_from_list = np.array(py_list)\nprint(\"Array from list:\", arr_from_list)\n\nArray from list: [1 2 3 4]\n\n\n\nprint(py_list)\n\n[1, 2, 3, 4]\n\n\n\nprint(arr_from_list)\n\n[1 2 3 4]\n\n\n\ntype(py_list), type(arr_from_list)\n\n(list, numpy.ndarray)\n\n\n\npy_list = [0, 0, 0, 0, 0, 0, 0]\nnp.array(py_list)\n\nzeros_arr = np.zeros(7, dtype=np.int32)\nzeros_arr, py_list\n\n(array([0, 0, 0, 0, 0, 0, 0], dtype=int32), [0, 0, 0, 0, 0, 0, 0])\n\n\n\n# Using built-in functions\nzeros_arr = np.zeros((2, 3))\nprint(\"Zeros array:\\n\", zeros_arr)\n\nzeros_1d = np.zeros(3)\nprint(\"1D Zeros array:\", zeros_1d)\n\nZeros array:\n [[0. 0. 0.]\n [0. 0. 0.]]\n1D Zeros array: [0. 0. 0.]\n\n\n\nones_arr = np.ones((3, 2))\nprint(\"Ones array:\\n\", ones_arr)\n\nOnes array:\n [[1. 1.]\n [1. 1.]\n [1. 1.]]\n\n\n\nlist(range(0, 10, 2))\n\n[0, 2, 4, 6, 8]\n\n\n\nrange_arr = np.arange(0, 10, 2)\nprint(\"range_arr =\", range_arr)\n\nrange_arr = [0 2 4 6 8]\n\n\n\nnp.arange(0, 10, 2.5)\n\narray([0. , 2.5, 5. , 7.5])\n\n\n\ndef f(x):\n    return np.sin(x)\n\nx_range = np.arange(0, 2*np.pi, 0.001)\ny = f(x_range)\n\n\nx_range\n\narray([0.000e+00, 1.000e-03, 2.000e-03, ..., 6.281e+00, 6.282e+00,\n       6.283e+00])\n\n\n\nplt.plot(x_range, y)\n\n\n\n\n\n\n\n\n\nlinspace_arr = np.linspace(0, 1, 5)\nprint(\"linspace_arr =\", linspace_arr)\n\nlinspace_arr = [0.   0.25 0.5  0.75 1.  ]\n\n\n\nidentity_mat_arr = np.eye(3)\nprint(\"Identity matrix array:\\n\", identity_mat_arr)\n\nIdentity matrix array:\n [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n\n\n\n\n\nshape, size, ndim, and dtype are particularly important.\n\nrandom_arr = np.random.randint(1, 10, size=(3,4))\n\nprint(\"Array:\\n\", random_arr)\nprint(\"Shape:\", random_arr.shape)\nprint(\"Size:\", random_arr.size)\nprint(\"Dimensions:\", random_arr.ndim)\nprint(\"Data Type:\", random_arr.dtype)\n\nArray:\n [[1 1 2 8]\n [8 4 5 2]\n [3 2 9 8]]\nShape: (3, 4)\nSize: 12\nDimensions: 2\nData Type: int64\n\n\n\n\n\n? and . tab completion are useful for exploring the API.\n\nnp.zeros?\n\n\nDocstring:\nzeros(shape, dtype=float, order='C', *, like=None)\nReturn a new array of given shape and type, filled with zeros.\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n    .. versionadded:: 1.20.0\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\nExamples\n--------\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n&gt;&gt;&gt; np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n&gt;&gt;&gt; np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n&gt;&gt;&gt; s = (2,2)\n&gt;&gt;&gt; np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n&gt;&gt;&gt; np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '&lt;i4'), ('y', '&lt;i4')])\nType:      builtin_function_or_method\n\n\n\n\nhelp(np.zeros)\n\nHelp on built-in function zeros in module numpy:\n\nzeros(...)\n    zeros(shape, dtype=float, order='C', *, like=None)\n\n    Return a new array of given shape and type, filled with zeros.\n\n    Parameters\n    ----------\n    shape : int or tuple of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `numpy.int8`.  Default is\n        `numpy.float64`.\n    order : {'C', 'F'}, optional, default: 'C'\n        Whether to store multi-dimensional data in row-major\n        (C-style) or column-major (Fortran-style) order in\n        memory.\n    like : array_like, optional\n        Reference object to allow the creation of arrays which are not\n        NumPy arrays. If an array-like passed in as ``like`` supports\n        the ``__array_function__`` protocol, the result will be defined\n        by it. In this case, it ensures the creation of an array object\n        compatible with that passed in via this argument.\n\n        .. versionadded:: 1.20.0\n\n    Returns\n    -------\n    out : ndarray\n        Array of zeros with the given shape, dtype, and order.\n\n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty : Return a new uninitialized array.\n    ones : Return a new array setting values to one.\n    full : Return a new array of given shape filled with value.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; np.zeros(5)\n    array([ 0.,  0.,  0.,  0.,  0.])\n\n    &gt;&gt;&gt; np.zeros((5,), dtype=int)\n    array([0, 0, 0, 0, 0])\n\n    &gt;&gt;&gt; np.zeros((2, 1))\n    array([[ 0.],\n           [ 0.]])\n\n    &gt;&gt;&gt; s = (2,2)\n    &gt;&gt;&gt; np.zeros(s)\n    array([[ 0.,  0.],\n           [ 0.,  0.]])\n\n    &gt;&gt;&gt; np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\n    array([(0, 0), (0, 0)],\n          dtype=[('x', '&lt;i4'), ('y', '&lt;i4')])\n\n\n\n\na = np.zeros((2, 3))\na.size\n\n6\n\n\n\n# Gotcha\n# Shape of (N,) v/s (N, 1)\n\na = np.zeros(3)\nprint(\"Shape of a:\", a.shape)\nprint(\"a:\", a)\n\nb = np.zeros((3, 1))\nprint(\"Shape of b:\", b.shape)\nprint(\"b:\\n\", b)\n\nc = np.zeros((1, 3))\nprint(\"Shape of c:\", c.shape)\nprint(\"c:\\n\", c)\n\nShape of a: (3,)\na: [0. 0. 0.]\nShape of b: (3, 1)\nb:\n [[0.]\n [0.]\n [0.]]\nShape of c: (1, 3)\nc:\n [[0. 0. 0.]]\n\n\nIn above code, “a” is a vector (1d array) and “b” is a matrix (2d array) with 3 rows and 1 column; “c” is a 2d array with 1 row and 3 columns.\n\n\n\n\nIndexing for single elements: arr[r, c]\nSlicing for subarrays: arr[start:stop:step]\n\nRemember that slices in NumPy are views—changing a slice changes the original array.\n\n# Example array\nx = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\nprint(\"Original x:\\n\", x)\n\nOriginal x:\n [[10 20 30]\n [40 50 60]\n [70 80 90]]\n\n\n\n# Accessing a single element\n# If we want to select the second element of the first row, we need to specify row and column\nprint(\"Second element of the First Row:\", x[0, 1])\n\nSecond element of the First Row: 20\n\n\n\n# Note: We can also use x[0][1] to get the same result but it is less efficient because it first creates \n# an array containing the first row and then selects the element from that row.\n\nprint(\"Second element of the First Row:\", x[0][1])\n\nSecond element of the First Row: 20\n\n\n\nprint(\"x = \", x)\n# Slicing examples\nprint(\"x[:1] =\", x[:1])  # Slices up to the first row (row index 0)\nprint(\"x[1:] =\", x[1:])  # Starts slicing from the second row (row index 1)\nprint(\"x[::2] =\", x[::2])  # Selects every second row (row indices 0 and 2 in this case)\n\nx =  [[10 20 30]\n [40 50 60]\n [70 80 90]]\nx[:1] = [[10 20 30]]\nx[1:] = [[40 50 60]\n [70 80 90]]\nx[::2] = [[10 20 30]\n [70 80 90]]\n\n\n\nprint(\"x = \", x)\n# Slicing examples\nprint(\"x[:1] =\", x[:1, :])  # Slices up to the first row (row index 0)\nprint(\"x[1:] =\", x[1:, :])  # Starts slicing from the second row (row index 1)\nprint(\"x[::2] =\", x[::2, :])  # Selects every second row (row indices 0 and 2 in this case)\n\nx =  [[10 20 30]\n [40 50 60]\n [70 80 90]]\nx[:1] = [[10 20 30]]\nx[1:] = [[40 50 60]\n [70 80 90]]\nx[::2] = [[10 20 30]\n [70 80 90]]\n\n\n\n# Changing a view changes the original array\narr2d = np.random.randint(10, size=(4,5))\nprint(\"\\narr2d:\\n\", arr2d)\n\n\narr2d:\n [[6 8 0 8 6]\n [2 2 3 1 5]\n [7 9 0 0 8]\n [5 1 8 6 5]]\n\n\n\nsub = arr2d[:2, :3]\nprint(\"\\nSubarray:\", sub)\n\n\nSubarray: [[6 8 0]\n [2 2 3]]\n\n\n\nsub[0,0] = 99\nprint(\"\\nChanged subarray =&gt; arr2d:\")\nprint(arr2d)\n\n\nChanged subarray =&gt; arr2d:\n[[99  8  0  8  6]\n [ 2  2  3  1  5]\n [ 7  9  0  0  8]\n [ 5  1  8  6  5]]\n\n\n\n# Create a copy of the array and then change the value\n\narr2d = np.random.randint(10, size=(4,5))\n\nprint(\"\\narr2d:\\n\", arr2d)\n\narr2d_copy = arr2d[:2, :3].copy()\nprint(\"\\nCopy of subarray:\", arr2d_copy)\n\narr2d_copy[0,0] = 99\n\nprint(\"\\nChanged copy of subarray \")\nprint(arr2d_copy)\n\nprint(\"\\nSame original array =&gt; arr2d:\")\nprint(arr2d)\n\n\narr2d:\n [[5 1 8 0 0]\n [0 1 4 6 3]\n [3 8 6 9 6]\n [3 5 2 8 3]]\n\nCopy of subarray: [[5 1 8]\n [0 1 4]]\n\nChanged copy of subarray \n[[99  1  8]\n [ 0  1  4]]\n\nSame original array =&gt; arr2d:\n[[5 1 8 0 0]\n [0 1 4 6 3]\n [3 8 6 9 6]\n [3 5 2 8 3]]\n\n\n\nprint(audio_arr), print(audio_arr.shape)\nAudio(audio_arr, rate=audio.frame_rate)\n\n[0 0 0 ... 0 0 0]\n(82368,)\n\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\n# Get last 2 seconds of audio\nlast_2_seconds = audio_arr[-2 * audio.frame_rate:]\nAudio(last_2_seconds, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\n\n\nUse reshape to change the shape without altering data.\n\ngrid = np.arange(1, 10)\nprint(\"Array, shape, dimensions:\")\nprint(grid, grid.shape, grid.ndim)\n\nArray, shape, dimensions:\n[1 2 3 4 5 6 7 8 9] (9,) 1\n\n\n\ngrid_3x3 = grid.reshape((3,3))\nprint(\"\\nArray, shape, dimensions:\")\nprint(grid_3x3, grid_3x3.shape, grid_3x3.ndim)\n\n\nArray, shape, dimensions:\n[[1 2 3]\n [4 5 6]\n [7 8 9]] (3, 3) 2\n\n\n\ngrid_temp = grid.reshape((1, 3,3))\nprint(\"\\nArray, shape, dimensions:\")\nprint(grid_temp, grid_temp.shape, grid_temp.ndim)\n\n\nArray, shape, dimensions:\n[[[1 2 3]\n  [4 5 6]\n  [7 8 9]]] (1, 3, 3) 3\n\n\n\ngrid.reshape((2, 5))\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[60], line 1\n----&gt; 1 grid.reshape((2, 5))\n\nValueError: cannot reshape array of size 9 into shape (2,5)\n\n\n\n\n# Example usage \n\nrandom_2d_img = np.random.randint(0, 255, size=(28, 28))\nplt.imshow(random_2d_img, cmap='gray')\nprint(random_2d_img.shape)\n\n(28, 28)\n\n\n\n\n\n\n\n\n\n\n# Flatten the 2D image to 1D\nflattened_img = random_2d_img.flatten()\nprint(\"Flattened image shape:\", flattened_img.shape)\n\nFlattened image shape: (784,)\n\n\n\nN = flattened_img.size\nflattened_img_using_reshape = random_2d_img.reshape(N)\n\nprint(\"Flattened image using reshape:\", flattened_img_using_reshape.shape)\n\nFlattened image using reshape: (784,)\n\n\n\n# Using -1 in reshape\nflattened_img_using_reshape = random_2d_img.reshape(-1)\n\nprint(\"Flattened image using reshape with -1:\", flattened_img_using_reshape.shape)\n\nFlattened image using reshape with -1: (784,)\n\n\n\nflattened_img.shape\n\n(784,)\n\n\n\n# Using -1 in reshape in one dimension\n\ntwo_d_img_1= flattened_img.reshape(28, -1)\nprint(\"2D image shape:\", two_d_img_1.shape)\n\ntwo_d_img_2 = flattened_img.reshape(-1, 28)\nprint(\"2D image shape:\", two_d_img_2.shape)\n\n# Check if two arrays are equal\nnp.all(two_d_img_1 == two_d_img_2)\n\n2D image shape: (28, 28)\n2D image shape: (28, 28)\n\n\nnp.True_\n\n\n\n\n\nnp.concatenate, np.vstack, and np.hstack can help combine arrays.\n\narrA = np.array([1, 2, 3])\narrB = np.array([4, 5, 6])\nprint(\"Concatenate:\", np.concatenate([arrA, arrB]))\n\ngridA = np.array([[1,2],[3,4]])\ngridB = np.array([[5,6],[7,8]])\nprint(\"\\nVStack:\\n\", np.vstack([gridA, gridB]))\nprint(\"\\nHStack:\\n\", np.hstack([gridA, gridB]))\n\nConcatenate: [1 2 3 4 5 6]\n\nVStack:\n [[1 2]\n [3 4]\n [5 6]\n [7 8]]\n\nHStack:\n [[1 2 5 6]\n [3 4 7 8]]\n\n\n\n\n\nUfuncs are vectorized, element-by-element functions that allow fast operations on entire arrays without explicit Python loops. Each arithmetic operator (+, -, *, /, etc.) in NumPy is backed by a ufunc, and there are many more specialized ufuncs for math, stats, etc.\n\n# Create a simple array\nx = np.arange(5)\nprint(\"x:\", x)\n\n# Perform elementwise operations via ufuncs\ny = x * 2      # multiplication\nz = np.exp(x)  # exponential\nprint(\"y = x * 2:\", y)\nprint(\"z = np.exp(x):\", z)\n\nx: [0 1 2 3 4]\ny = x * 2: [0 2 4 6 8]\nz = np.exp(x): [ 1.          2.71828183  7.3890561  20.08553692 54.59815003]\n\n\n\nx_list = range(5)\nmul_two = [x*2 for x in x_list]\nprint(mul_two)\n\n[0, 2, 4, 6, 8]\n\n\n\n\n\nAggregations summarize array values into a single numeric result (or one result per axis). Common examples include minimum, maximum, sum, mean, median, standard deviation, etc.\n\ndata = np.random.randint(1, 100, size=10)\nprint(\"data:\", data)\n\n# Basic aggregations\nprint(\"Sum:\", np.sum(data))\nprint(\"Min:\", np.min(data))\nprint(\"Max:\", np.max(data))\nprint(\"Mean:\", np.mean(data))\nprint(\"Standard Deviation:\", np.std(data))\n\n\nmatrix = np.random.randint(0, 10, size=(3,4))\nprint(\"matrix:\\n\", matrix)\n\nprint(\"Min of each column:\", np.min(matrix, axis=0))\nprint(\"Max of each row:\", np.max(matrix, axis=1))\n\ndata: [38 61  9 74  1  5 60 77 71 94]\nSum: 490\nMin: 1\nMax: 94\nMean: 49.0\nStandard Deviation: 31.849646779831012\nmatrix:\n [[7 1 2 5]\n [7 3 5 5]\n [9 6 1 8]]\nMin of each column: [7 1 1 5]\nMax of each row: [7 7 9]\n\n\n\n\n\nAllows operations on arrays of different shapes by stretching dimensions when possible.\nSee this nice video\n\na = np.array([1.0, 2.0, 3.0])\nb = np.array([2.0, 2.0, 2.0])\n\nc = a*b\nprint(\"c = a*b:\", c)\nprint(c.shape)\n\nc = a*b: [2. 4. 6.]\n(3,)\n\n\n\nscalar = 2.0\nd = a * scalar\n\nprint(\"d = a * scalar:\", d)\nprint(d.shape)\n\nd = a * scalar: [2. 4. 6.]\n(3,)\n\n\n\nX = np.array([[2, 6, 8], [4, 5, 3]])\nprint(X.shape)\n\nY = np.array([[2], [1]])\nprint(Y.shape)\n\nZ = X + Y\nprint(Z.shape)\n\n(2, 3)\n(2, 1)\n(2, 3)\n\n\n\nReference: https://numpy.org/doc/stable/user/basics.broadcasting.html\n\na = np.array([[ 0.0,  0.0,  0.0],\n              [10.0, 10.0, 10.0],\n              [20.0, 20.0, 20.0],\n              [30.0, 30.0, 30.0]])\nb = np.array([1.0, 2.0, 3.0])\nprint(a)\nprint(b)\n\n# Broadcasting \nprint(\"a + b:\\n\", a + b)    \n\n[[ 0.  0.  0.]\n [10. 10. 10.]\n [20. 20. 20.]\n [30. 30. 30.]]\n[1. 2. 3.]\na + b:\n [[ 1.  2.  3.]\n [11. 12. 13.]\n [21. 22. 23.]\n [31. 32. 33.]]\n\n\n\n\n\nCreate a mask to select certain elements.\n\ndata = np.random.randint(1, 20, size=10)\nmask = data &gt; 10\nprint(\"data:\", data)\nprint(\"mask:\", mask)\nprint(\"Values &gt; 10:\", data[mask])\n\ndata: [12  8 14  5 10 13  4 14  2  1]\nmask: [ True False  True False False  True False  True False False]\nValues &gt; 10: [12 14 13 14]\n\n\n\n\n\n\nnp.sort(arr) returns a sorted copy.\narr.sort() sorts in-place.\nnp.argsort returns the indices.\n\n\nunsorted_arr = np.array([2,1,4,3,5])\nprint(\"Sorted copy:\", np.sort(unsorted_arr))\nprint(\"Original:\", unsorted_arr)\n\nunsorted_arr.sort()\nprint(\"In-place sort:\", unsorted_arr)\n\nSorted copy: [1 2 3 4 5]\nOriginal: [2 1 4 3 5]\nIn-place sort: [1 2 3 4 5]\n\n\n\n\n\nShreyans Jain, BTech IIT Gandhinagar for creating the first version of this notebook."
  },
  {
    "objectID": "notebooks/intro-numpy.html#introduction-to-numerical-computing-with-numpy",
    "href": "notebooks/intro-numpy.html#introduction-to-numerical-computing-with-numpy",
    "title": "Introduction to NumPy",
    "section": "",
    "text": "import numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# config retina mode\n%config InlineBackend.figure_format = 'retina'\n\n\nimg_path = \"../datasets/images/street.jpg\"\nimg = Image.open(img_path)\n\n\nimg_array = np.array(img).astype(np.uint8)\n\n\nplt.imshow(img_array)\n# remove axis\n_ = plt.axis('off')\n\n\n\n\n\n\n\n\n\nimg_array\n\narray([[[ 48,  51,  56],\n        [ 41,  44,  49],\n        [ 31,  34,  39],\n        ...,\n        [153, 154, 149],\n        [129, 125, 116],\n        [120, 112, 101]],\n\n       [[ 47,  50,  55],\n        [ 41,  44,  49],\n        [ 30,  33,  38],\n        ...,\n        [151, 152, 147],\n        [126, 122, 113],\n        [117, 109,  98]],\n\n       [[ 46,  49,  54],\n        [ 39,  42,  47],\n        [ 29,  32,  37],\n        ...,\n        [147, 148, 143],\n        [121, 117, 108],\n        [113, 105,  94]],\n\n       ...,\n\n       [[ 80,  93,  99],\n        [ 85,  98, 104],\n        [ 91, 104, 110],\n        ...,\n        [ 83,  88,  92],\n        [ 85,  90,  94],\n        [ 88,  93,  97]],\n\n       [[ 69,  80,  86],\n        [ 75,  86,  92],\n        [ 82,  93,  99],\n        ...,\n        [ 86,  94,  97],\n        [ 86,  94,  97],\n        [ 87,  95,  98]],\n\n       [[ 58,  65,  75],\n        [ 64,  71,  81],\n        [ 73,  80,  90],\n        ...,\n        [ 90,  98, 101],\n        [ 88,  96,  99],\n        [ 88,  96,  99]]], dtype=uint8)\n\n\n\nimg_array.shape\n\n(2000, 3000, 3)\n\n\n\nimg_array.dtype\n\ndtype('uint8')\n\n\n\n# rotate image by 90 degrees\nrotated_img_array = np.rot90(img_array)\n\nplt.imshow(rotated_img_array.astype(np.uint8))\nplt.axis('off')\n\n\n\n\n\n\n\n\n\n# 0, 0 th pixel\nimg_array[0, 0]\n\narray([48, 51, 56], dtype=uint8)\n\n\n\n# Increase R value of first quarter to max\nnew_img = img_array.copy()\nnew_img[:new_img.shape[0]//2, :new_img.shape[1]//2, 0] = 255\n\nplt.imshow(new_img)\nplt.axis('off')\n\n\n\n\n\n\n\n\n\n%pip install pydub -q\n\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n# load audio\nfrom email.mime import audio\nfrom pydub import AudioSegment\naudio_path = \"../datasets/audio/pm-answer.mp3\"\n\n\naudio = AudioSegment.from_file(audio_path)\n\n\naudio\n\n\n                    \n                        \n                        Your browser does not support the audio element.\n                    \n                  \n\n\n\naudio_arr = np.array(audio.get_array_of_samples())\n\n\naudio_arr\n\narray([0, 0, 0, ..., 0, 0, 0], dtype=int16)\n\n\n\nplt.plot(audio_arr)\nplt.xlabel('Sample')\nplt.ylabel('Amplitude')\n\nText(0, 0.5, 'Amplitude')\n\n\n\n\n\n\n\n\n\n\naudio_arr.shape\n\n(82368,)\n\n\n\naudio.frame_rate\n\n24000\n\n\n\n# Convert plot to time as x-axis\ntime = np.linspace(0, len(audio_arr) / audio.frame_rate, num=len(audio_arr))\n\nplt.plot(time, audio_arr)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\n\nText(0, 0.5, 'Amplitude')\n\n\n\n\n\n\n\n\n\n\n# Add a smoothing effect\nfrom scipy.signal import savgol_filter\n\nsmoothed_audio_arr = savgol_filter(audio_arr, 51, 3)\n\nplt.plot(time, smoothed_audio_arr)\n\n\n\n\n\n\n\n\n\nfrom IPython.display import Audio\nAudio(audio_arr, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nAudio(smoothed_audio_arr, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Sample text data\ndocuments = [\n    \"The quick brown fox jumps over the lazy dog\",\n    \"Never jump over the lazy dog quickly\"\n]\n\n# Convert text to a bag-of-words representation\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(documents)\n\nprint(\"Feature names:\", vectorizer.get_feature_names_out())\nprint(\"Bag-of-words representation:\\n\", X.toarray())\n\nFeature names: ['brown' 'dog' 'fox' 'jump' 'jumps' 'lazy' 'never' 'over' 'quick'\n 'quickly' 'the']\nBag-of-words representation:\n [[1 1 1 0 1 1 0 1 1 0 2]\n [0 1 0 1 0 1 1 1 0 1 1]]\n\n\nWhy not use Python lists instead of NumPy arrays?\n\nimport time\n\nn_nums = 10000000\n# Using a Python list\nlst = list(range(n_nums))\nstart = time.time()\nlst_squared = [x**2 for x in lst]\nend = time.time()\nprint(f\"Python list computation time: {end - start: .2f} seconds\")\n\n# Using a NumPy array\narr = np.arange(n_nums)\nstart = time.time()\narr_squared = arr ** 2\nend = time.time()\nprint(f\"NumPy array computation time: {end - start: .2f} seconds\")\n\nPython list computation time:  0.21 seconds\nNumPy array computation time:  0.01 seconds\n\n\n\nImport & Version Check\n\nimport numpy as np\nprint(\"Using NumPy version:\", np.__version__)\n\nUsing NumPy version: 2.1.2\n\n\n\n\n\nNumPy arrays can come from Python lists or built-in functions.\n\n# From a Python list\npy_list = [1, 2, 3, 4]\narr_from_list = np.array(py_list)\nprint(\"Array from list:\", arr_from_list)\n\nArray from list: [1 2 3 4]\n\n\n\nprint(py_list)\n\n[1, 2, 3, 4]\n\n\n\nprint(arr_from_list)\n\n[1 2 3 4]\n\n\n\ntype(py_list), type(arr_from_list)\n\n(list, numpy.ndarray)\n\n\n\npy_list = [0, 0, 0, 0, 0, 0, 0]\nnp.array(py_list)\n\nzeros_arr = np.zeros(7, dtype=np.int32)\nzeros_arr, py_list\n\n(array([0, 0, 0, 0, 0, 0, 0], dtype=int32), [0, 0, 0, 0, 0, 0, 0])\n\n\n\n# Using built-in functions\nzeros_arr = np.zeros((2, 3))\nprint(\"Zeros array:\\n\", zeros_arr)\n\nzeros_1d = np.zeros(3)\nprint(\"1D Zeros array:\", zeros_1d)\n\nZeros array:\n [[0. 0. 0.]\n [0. 0. 0.]]\n1D Zeros array: [0. 0. 0.]\n\n\n\nones_arr = np.ones((3, 2))\nprint(\"Ones array:\\n\", ones_arr)\n\nOnes array:\n [[1. 1.]\n [1. 1.]\n [1. 1.]]\n\n\n\nlist(range(0, 10, 2))\n\n[0, 2, 4, 6, 8]\n\n\n\nrange_arr = np.arange(0, 10, 2)\nprint(\"range_arr =\", range_arr)\n\nrange_arr = [0 2 4 6 8]\n\n\n\nnp.arange(0, 10, 2.5)\n\narray([0. , 2.5, 5. , 7.5])\n\n\n\ndef f(x):\n    return np.sin(x)\n\nx_range = np.arange(0, 2*np.pi, 0.001)\ny = f(x_range)\n\n\nx_range\n\narray([0.000e+00, 1.000e-03, 2.000e-03, ..., 6.281e+00, 6.282e+00,\n       6.283e+00])\n\n\n\nplt.plot(x_range, y)\n\n\n\n\n\n\n\n\n\nlinspace_arr = np.linspace(0, 1, 5)\nprint(\"linspace_arr =\", linspace_arr)\n\nlinspace_arr = [0.   0.25 0.5  0.75 1.  ]\n\n\n\nidentity_mat_arr = np.eye(3)\nprint(\"Identity matrix array:\\n\", identity_mat_arr)\n\nIdentity matrix array:\n [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n\n\n\n\n\nshape, size, ndim, and dtype are particularly important.\n\nrandom_arr = np.random.randint(1, 10, size=(3,4))\n\nprint(\"Array:\\n\", random_arr)\nprint(\"Shape:\", random_arr.shape)\nprint(\"Size:\", random_arr.size)\nprint(\"Dimensions:\", random_arr.ndim)\nprint(\"Data Type:\", random_arr.dtype)\n\nArray:\n [[1 1 2 8]\n [8 4 5 2]\n [3 2 9 8]]\nShape: (3, 4)\nSize: 12\nDimensions: 2\nData Type: int64\n\n\n\n\n\n? and . tab completion are useful for exploring the API.\n\nnp.zeros?\n\n\nDocstring:\nzeros(shape, dtype=float, order='C', *, like=None)\nReturn a new array of given shape and type, filled with zeros.\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n    .. versionadded:: 1.20.0\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\nExamples\n--------\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n&gt;&gt;&gt; np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n&gt;&gt;&gt; np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n&gt;&gt;&gt; s = (2,2)\n&gt;&gt;&gt; np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n&gt;&gt;&gt; np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '&lt;i4'), ('y', '&lt;i4')])\nType:      builtin_function_or_method\n\n\n\n\nhelp(np.zeros)\n\nHelp on built-in function zeros in module numpy:\n\nzeros(...)\n    zeros(shape, dtype=float, order='C', *, like=None)\n\n    Return a new array of given shape and type, filled with zeros.\n\n    Parameters\n    ----------\n    shape : int or tuple of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `numpy.int8`.  Default is\n        `numpy.float64`.\n    order : {'C', 'F'}, optional, default: 'C'\n        Whether to store multi-dimensional data in row-major\n        (C-style) or column-major (Fortran-style) order in\n        memory.\n    like : array_like, optional\n        Reference object to allow the creation of arrays which are not\n        NumPy arrays. If an array-like passed in as ``like`` supports\n        the ``__array_function__`` protocol, the result will be defined\n        by it. In this case, it ensures the creation of an array object\n        compatible with that passed in via this argument.\n\n        .. versionadded:: 1.20.0\n\n    Returns\n    -------\n    out : ndarray\n        Array of zeros with the given shape, dtype, and order.\n\n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty : Return a new uninitialized array.\n    ones : Return a new array setting values to one.\n    full : Return a new array of given shape filled with value.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; np.zeros(5)\n    array([ 0.,  0.,  0.,  0.,  0.])\n\n    &gt;&gt;&gt; np.zeros((5,), dtype=int)\n    array([0, 0, 0, 0, 0])\n\n    &gt;&gt;&gt; np.zeros((2, 1))\n    array([[ 0.],\n           [ 0.]])\n\n    &gt;&gt;&gt; s = (2,2)\n    &gt;&gt;&gt; np.zeros(s)\n    array([[ 0.,  0.],\n           [ 0.,  0.]])\n\n    &gt;&gt;&gt; np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\n    array([(0, 0), (0, 0)],\n          dtype=[('x', '&lt;i4'), ('y', '&lt;i4')])\n\n\n\n\na = np.zeros((2, 3))\na.size\n\n6\n\n\n\n# Gotcha\n# Shape of (N,) v/s (N, 1)\n\na = np.zeros(3)\nprint(\"Shape of a:\", a.shape)\nprint(\"a:\", a)\n\nb = np.zeros((3, 1))\nprint(\"Shape of b:\", b.shape)\nprint(\"b:\\n\", b)\n\nc = np.zeros((1, 3))\nprint(\"Shape of c:\", c.shape)\nprint(\"c:\\n\", c)\n\nShape of a: (3,)\na: [0. 0. 0.]\nShape of b: (3, 1)\nb:\n [[0.]\n [0.]\n [0.]]\nShape of c: (1, 3)\nc:\n [[0. 0. 0.]]\n\n\nIn above code, “a” is a vector (1d array) and “b” is a matrix (2d array) with 3 rows and 1 column; “c” is a 2d array with 1 row and 3 columns.\n\n\n\n\nIndexing for single elements: arr[r, c]\nSlicing for subarrays: arr[start:stop:step]\n\nRemember that slices in NumPy are views—changing a slice changes the original array.\n\n# Example array\nx = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\nprint(\"Original x:\\n\", x)\n\nOriginal x:\n [[10 20 30]\n [40 50 60]\n [70 80 90]]\n\n\n\n# Accessing a single element\n# If we want to select the second element of the first row, we need to specify row and column\nprint(\"Second element of the First Row:\", x[0, 1])\n\nSecond element of the First Row: 20\n\n\n\n# Note: We can also use x[0][1] to get the same result but it is less efficient because it first creates \n# an array containing the first row and then selects the element from that row.\n\nprint(\"Second element of the First Row:\", x[0][1])\n\nSecond element of the First Row: 20\n\n\n\nprint(\"x = \", x)\n# Slicing examples\nprint(\"x[:1] =\", x[:1])  # Slices up to the first row (row index 0)\nprint(\"x[1:] =\", x[1:])  # Starts slicing from the second row (row index 1)\nprint(\"x[::2] =\", x[::2])  # Selects every second row (row indices 0 and 2 in this case)\n\nx =  [[10 20 30]\n [40 50 60]\n [70 80 90]]\nx[:1] = [[10 20 30]]\nx[1:] = [[40 50 60]\n [70 80 90]]\nx[::2] = [[10 20 30]\n [70 80 90]]\n\n\n\nprint(\"x = \", x)\n# Slicing examples\nprint(\"x[:1] =\", x[:1, :])  # Slices up to the first row (row index 0)\nprint(\"x[1:] =\", x[1:, :])  # Starts slicing from the second row (row index 1)\nprint(\"x[::2] =\", x[::2, :])  # Selects every second row (row indices 0 and 2 in this case)\n\nx =  [[10 20 30]\n [40 50 60]\n [70 80 90]]\nx[:1] = [[10 20 30]]\nx[1:] = [[40 50 60]\n [70 80 90]]\nx[::2] = [[10 20 30]\n [70 80 90]]\n\n\n\n# Changing a view changes the original array\narr2d = np.random.randint(10, size=(4,5))\nprint(\"\\narr2d:\\n\", arr2d)\n\n\narr2d:\n [[6 8 0 8 6]\n [2 2 3 1 5]\n [7 9 0 0 8]\n [5 1 8 6 5]]\n\n\n\nsub = arr2d[:2, :3]\nprint(\"\\nSubarray:\", sub)\n\n\nSubarray: [[6 8 0]\n [2 2 3]]\n\n\n\nsub[0,0] = 99\nprint(\"\\nChanged subarray =&gt; arr2d:\")\nprint(arr2d)\n\n\nChanged subarray =&gt; arr2d:\n[[99  8  0  8  6]\n [ 2  2  3  1  5]\n [ 7  9  0  0  8]\n [ 5  1  8  6  5]]\n\n\n\n# Create a copy of the array and then change the value\n\narr2d = np.random.randint(10, size=(4,5))\n\nprint(\"\\narr2d:\\n\", arr2d)\n\narr2d_copy = arr2d[:2, :3].copy()\nprint(\"\\nCopy of subarray:\", arr2d_copy)\n\narr2d_copy[0,0] = 99\n\nprint(\"\\nChanged copy of subarray \")\nprint(arr2d_copy)\n\nprint(\"\\nSame original array =&gt; arr2d:\")\nprint(arr2d)\n\n\narr2d:\n [[5 1 8 0 0]\n [0 1 4 6 3]\n [3 8 6 9 6]\n [3 5 2 8 3]]\n\nCopy of subarray: [[5 1 8]\n [0 1 4]]\n\nChanged copy of subarray \n[[99  1  8]\n [ 0  1  4]]\n\nSame original array =&gt; arr2d:\n[[5 1 8 0 0]\n [0 1 4 6 3]\n [3 8 6 9 6]\n [3 5 2 8 3]]\n\n\n\nprint(audio_arr), print(audio_arr.shape)\nAudio(audio_arr, rate=audio.frame_rate)\n\n[0 0 0 ... 0 0 0]\n(82368,)\n\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\n# Get last 2 seconds of audio\nlast_2_seconds = audio_arr[-2 * audio.frame_rate:]\nAudio(last_2_seconds, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\n\n\nUse reshape to change the shape without altering data.\n\ngrid = np.arange(1, 10)\nprint(\"Array, shape, dimensions:\")\nprint(grid, grid.shape, grid.ndim)\n\nArray, shape, dimensions:\n[1 2 3 4 5 6 7 8 9] (9,) 1\n\n\n\ngrid_3x3 = grid.reshape((3,3))\nprint(\"\\nArray, shape, dimensions:\")\nprint(grid_3x3, grid_3x3.shape, grid_3x3.ndim)\n\n\nArray, shape, dimensions:\n[[1 2 3]\n [4 5 6]\n [7 8 9]] (3, 3) 2\n\n\n\ngrid_temp = grid.reshape((1, 3,3))\nprint(\"\\nArray, shape, dimensions:\")\nprint(grid_temp, grid_temp.shape, grid_temp.ndim)\n\n\nArray, shape, dimensions:\n[[[1 2 3]\n  [4 5 6]\n  [7 8 9]]] (1, 3, 3) 3\n\n\n\ngrid.reshape((2, 5))\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[60], line 1\n----&gt; 1 grid.reshape((2, 5))\n\nValueError: cannot reshape array of size 9 into shape (2,5)\n\n\n\n\n# Example usage \n\nrandom_2d_img = np.random.randint(0, 255, size=(28, 28))\nplt.imshow(random_2d_img, cmap='gray')\nprint(random_2d_img.shape)\n\n(28, 28)\n\n\n\n\n\n\n\n\n\n\n# Flatten the 2D image to 1D\nflattened_img = random_2d_img.flatten()\nprint(\"Flattened image shape:\", flattened_img.shape)\n\nFlattened image shape: (784,)\n\n\n\nN = flattened_img.size\nflattened_img_using_reshape = random_2d_img.reshape(N)\n\nprint(\"Flattened image using reshape:\", flattened_img_using_reshape.shape)\n\nFlattened image using reshape: (784,)\n\n\n\n# Using -1 in reshape\nflattened_img_using_reshape = random_2d_img.reshape(-1)\n\nprint(\"Flattened image using reshape with -1:\", flattened_img_using_reshape.shape)\n\nFlattened image using reshape with -1: (784,)\n\n\n\nflattened_img.shape\n\n(784,)\n\n\n\n# Using -1 in reshape in one dimension\n\ntwo_d_img_1= flattened_img.reshape(28, -1)\nprint(\"2D image shape:\", two_d_img_1.shape)\n\ntwo_d_img_2 = flattened_img.reshape(-1, 28)\nprint(\"2D image shape:\", two_d_img_2.shape)\n\n# Check if two arrays are equal\nnp.all(two_d_img_1 == two_d_img_2)\n\n2D image shape: (28, 28)\n2D image shape: (28, 28)\n\n\nnp.True_\n\n\n\n\n\nnp.concatenate, np.vstack, and np.hstack can help combine arrays.\n\narrA = np.array([1, 2, 3])\narrB = np.array([4, 5, 6])\nprint(\"Concatenate:\", np.concatenate([arrA, arrB]))\n\ngridA = np.array([[1,2],[3,4]])\ngridB = np.array([[5,6],[7,8]])\nprint(\"\\nVStack:\\n\", np.vstack([gridA, gridB]))\nprint(\"\\nHStack:\\n\", np.hstack([gridA, gridB]))\n\nConcatenate: [1 2 3 4 5 6]\n\nVStack:\n [[1 2]\n [3 4]\n [5 6]\n [7 8]]\n\nHStack:\n [[1 2 5 6]\n [3 4 7 8]]\n\n\n\n\n\nUfuncs are vectorized, element-by-element functions that allow fast operations on entire arrays without explicit Python loops. Each arithmetic operator (+, -, *, /, etc.) in NumPy is backed by a ufunc, and there are many more specialized ufuncs for math, stats, etc.\n\n# Create a simple array\nx = np.arange(5)\nprint(\"x:\", x)\n\n# Perform elementwise operations via ufuncs\ny = x * 2      # multiplication\nz = np.exp(x)  # exponential\nprint(\"y = x * 2:\", y)\nprint(\"z = np.exp(x):\", z)\n\nx: [0 1 2 3 4]\ny = x * 2: [0 2 4 6 8]\nz = np.exp(x): [ 1.          2.71828183  7.3890561  20.08553692 54.59815003]\n\n\n\nx_list = range(5)\nmul_two = [x*2 for x in x_list]\nprint(mul_two)\n\n[0, 2, 4, 6, 8]\n\n\n\n\n\nAggregations summarize array values into a single numeric result (or one result per axis). Common examples include minimum, maximum, sum, mean, median, standard deviation, etc.\n\ndata = np.random.randint(1, 100, size=10)\nprint(\"data:\", data)\n\n# Basic aggregations\nprint(\"Sum:\", np.sum(data))\nprint(\"Min:\", np.min(data))\nprint(\"Max:\", np.max(data))\nprint(\"Mean:\", np.mean(data))\nprint(\"Standard Deviation:\", np.std(data))\n\n\nmatrix = np.random.randint(0, 10, size=(3,4))\nprint(\"matrix:\\n\", matrix)\n\nprint(\"Min of each column:\", np.min(matrix, axis=0))\nprint(\"Max of each row:\", np.max(matrix, axis=1))\n\ndata: [38 61  9 74  1  5 60 77 71 94]\nSum: 490\nMin: 1\nMax: 94\nMean: 49.0\nStandard Deviation: 31.849646779831012\nmatrix:\n [[7 1 2 5]\n [7 3 5 5]\n [9 6 1 8]]\nMin of each column: [7 1 1 5]\nMax of each row: [7 7 9]\n\n\n\n\n\nAllows operations on arrays of different shapes by stretching dimensions when possible.\nSee this nice video\n\na = np.array([1.0, 2.0, 3.0])\nb = np.array([2.0, 2.0, 2.0])\n\nc = a*b\nprint(\"c = a*b:\", c)\nprint(c.shape)\n\nc = a*b: [2. 4. 6.]\n(3,)\n\n\n\nscalar = 2.0\nd = a * scalar\n\nprint(\"d = a * scalar:\", d)\nprint(d.shape)\n\nd = a * scalar: [2. 4. 6.]\n(3,)\n\n\n\nX = np.array([[2, 6, 8], [4, 5, 3]])\nprint(X.shape)\n\nY = np.array([[2], [1]])\nprint(Y.shape)\n\nZ = X + Y\nprint(Z.shape)\n\n(2, 3)\n(2, 1)\n(2, 3)\n\n\n\nReference: https://numpy.org/doc/stable/user/basics.broadcasting.html\n\na = np.array([[ 0.0,  0.0,  0.0],\n              [10.0, 10.0, 10.0],\n              [20.0, 20.0, 20.0],\n              [30.0, 30.0, 30.0]])\nb = np.array([1.0, 2.0, 3.0])\nprint(a)\nprint(b)\n\n# Broadcasting \nprint(\"a + b:\\n\", a + b)    \n\n[[ 0.  0.  0.]\n [10. 10. 10.]\n [20. 20. 20.]\n [30. 30. 30.]]\n[1. 2. 3.]\na + b:\n [[ 1.  2.  3.]\n [11. 12. 13.]\n [21. 22. 23.]\n [31. 32. 33.]]\n\n\n\n\n\nCreate a mask to select certain elements.\n\ndata = np.random.randint(1, 20, size=10)\nmask = data &gt; 10\nprint(\"data:\", data)\nprint(\"mask:\", mask)\nprint(\"Values &gt; 10:\", data[mask])\n\ndata: [12  8 14  5 10 13  4 14  2  1]\nmask: [ True False  True False False  True False  True False False]\nValues &gt; 10: [12 14 13 14]\n\n\n\n\n\n\nnp.sort(arr) returns a sorted copy.\narr.sort() sorts in-place.\nnp.argsort returns the indices.\n\n\nunsorted_arr = np.array([2,1,4,3,5])\nprint(\"Sorted copy:\", np.sort(unsorted_arr))\nprint(\"Original:\", unsorted_arr)\n\nunsorted_arr.sort()\nprint(\"In-place sort:\", unsorted_arr)\n\nSorted copy: [1 2 3 4 5]\nOriginal: [2 1 4 3 5]\nIn-place sort: [1 2 3 4 5]\n\n\n\n\n\nShreyans Jain, BTech IIT Gandhinagar for creating the first version of this notebook."
  }
]