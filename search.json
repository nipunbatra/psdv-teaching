[
  {
    "objectID": "notebooks.html",
    "href": "notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "Introduction to Numerical Computing with NumPy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInroduction\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nJan 5, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nSet\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nDec 7, 2024\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Variables\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nDec 5, 2024\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/random-variables.html",
    "href": "notebooks/random-variables.html",
    "title": "Random Variables",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\n# Sample space for flipping a coin 2 times\nsample_space = [\"HH\", \"HT\", \"TH\", \"TT\"]\n\n\n# Define a random variable X as the number of Heads in the outcomes\ndef random_variable_X(outcome):\n    return outcome.count(\"H\")\n\n\nrandom_variable_X(\"HT\"), random_variable_X(\"TT\"), random_variable_X(\"HH\"), random_variable_X(\"TH\")\n\n(1, 0, 2, 1)\n\n\n\n# Mapping of outcomes to the random variable values\nmapping = {outcome: random_variable_X(outcome) for outcome in sample_space}\n\n\nmapping\n\n{'HH': 2, 'HT': 1, 'TH': 1, 'TT': 0}\n\n\n\ndf = pd.DataFrame(mapping, index=[\"X\"]).T\ndf.index.name = \"Outcome\"\ndf\n\n\n\n\n\n\n\n\nX\n\n\nOutcome\n\n\n\n\n\nHH\n2\n\n\nHT\n1\n\n\nTH\n1\n\n\nTT\n0\n\n\n\n\n\n\n\n\n# Find records/samples where X = 1\ndf[\"X\"] == 1\n\nOutcome\nHH    False\nHT     True\nTH     True\nTT    False\nName: X, dtype: bool\n\n\n\ndf[df[\"X\"] == 1]\n\n\n\n\n\n\n\n\nX\n\n\nOutcome\n\n\n\n\n\nHT\n1\n\n\nTH\n1\n\n\n\n\n\n\n\n\n# Calculate probabilities for X = 0, 1, 2\n\ndef calculate_probability_X(x, df):\n    subset = df[df[\"X\"] == x]\n    len_subset = len(subset)\n    len_df = len(df)\n    return len_subset / len_df\n\n\ncalculate_probability_X(0, df), calculate_probability_X(1, df), calculate_probability_X(2, df)\n\n(0.25, 0.5, 0.25)\n\n\n\n# Store inverse mapping\n\ninverse_mapping = {x: [] for x in range(3)}\nfor outcome, value in mapping.items():\n    inverse_mapping[value].append(outcome)\n    \nprint(inverse_mapping)\n\n{0: ['TT'], 1: ['HT', 'TH'], 2: ['HH']}\n\n\n\ndef calculate_probability_X(x, inverse_mapping):\n    outcomes = inverse_mapping[x]\n    len_outcomes = len(outcomes)\n    len_sample_space = len(sample_space)\n    return len_outcomes / len_sample_space\n\ncalculate_probability_X(0, inverse_mapping), calculate_probability_X(1, inverse_mapping), calculate_probability_X(2, inverse_mapping)\n\n(0.25, 0.5, 0.25)\n\n\n\n### Two dice example\n\n# Construct the sample space\n\nsample_space = [(i, j) for i in range(1, 7) for j in range(1, 7)]\nprint(sample_space)\n\n[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)]\n\n\n\n# Define a random variable X1 as the sum of the outcomes\n# Define a random variable X2 as the product of the outcomes\n# Define a random variable X3 as the maximum of the outcomes\n\ndef random_variable_X1(outcome):\n    return sum(outcome)\n\ndef random_variable_X2(outcome):\n    return outcome[0] * outcome[1]\n\ndef random_variable_X3(outcome):\n    return max(outcome)\n\n\nrandom_variable_X1([1, 2])\n\n3\n\n\n\n# Create a heatmap for the sum of the outcomes\ndf = pd.DataFrame(sample_space, columns=[\"D1\", \"D2\"])\n\ndf[\"X1\"] = df.apply(lambda row: random_variable_X1(row), axis=1)\ndf.index.name = \"Serial No.\"\n\n\ndf[df[\"X1\"] == 10]\n\n\n\n\n\n\n\n\nD1\nD2\nX1\n\n\nSerial No.\n\n\n\n\n\n\n\n23\n4\n6\n10\n\n\n28\n5\n5\n10\n\n\n33\n6\n4\n10\n\n\n\n\n\n\n\n\n# Create interactive ipywidgets for the sum of the outcomes\nimport ipywidgets as widgets\nfrom ipywidgets import interact\n\n@interact(x=widgets.IntSlider(min=2, max=12, step=1, value=7))\ndef show_samples(x):\n    return df[df[\"X1\"] == x]"
  },
  {
    "objectID": "notebooks/intro.html",
    "href": "notebooks/intro.html",
    "title": "Inroduction",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nfirst_4_chars = \"appl\"\n\nprobs = np.zeros(27) # 26 letters + space (EOS)\n\n# Store i to s\nitos = list(\"abcdefghijklmnopqrstuvwxyz \")\n\n# stoi \nstoi = {char: i for i, char in enumerate(itos)}\n\n# Fill in the probabilities\nprobs[stoi[\"a\"]] = 0.1\nprobs[stoi[\"e\"]] = 0.3\nprobs[stoi[\"i\"]] = 0.2\nprobs[stoi[\"o\"]] = 0.1\nprobs[stoi[\"u\"]] = 0.05\nprobs[stoi[\" \"]] = 0.05\n\nprobability_distribution = torch.distributions.Categorical(torch.tensor(probs))\n\n\nsample = probability_distribution.sample()\nprint(f\"Sampled character: {itos[sample]}\")\n\nSampled character: a\n\n\n\nsamples_numpy = np.random.uniform(0, 1, 1000)\nprint(samples_numpy[:10])\nplt.hist(samples_numpy)\n\n[0.18872185 0.29419573 0.05307716 0.4139927  0.80335078 0.64528118\n 0.4575413  0.76490687 0.53933945 0.3135855 ]\n\n\n(array([100.,  86., 105.,  99., 102.,  90., 105., 106., 104., 103.]),\n array([0.00367548, 0.10305437, 0.20243325, 0.30181214, 0.40119103,\n        0.50056992, 0.59994881, 0.6993277 , 0.79870659, 0.89808548,\n        0.99746437]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\n\nclass SimplePRNG:\n    def __init__(self, seed=42):\n        # Initialize the generator with a seed\n        self.modulus = 2**31 - 1  # Large prime modulus\n        self.multiplier = 1664525\n        self.increment = 1013904223\n        self.state = seed\n\n    def uniform(self, low=0.0, high=1.0, size=None):\n        # Generate random numbers in the range [low, high)\n        if size is None:\n            size = 1  # Default to a single number if size is None\n        if isinstance(size, int):\n            size = (size,)  # Convert size to tuple\n\n        # Generate random numbers\n        random_numbers = np.empty(size)\n        for idx in np.ndindex(size):\n            self.state = (self.multiplier * self.state + self.increment) % self.modulus\n            random_numbers[idx] = low + (high - low) * (self.state / self.modulus)\n\n        return random_numbers \n\n# Example usage:\nprng = SimplePRNG(seed=12345)\nprint(prng.uniform(0, 1, 50))  \n\n[0.04080538 0.04087837 0.54709049 0.26713204 0.42986223 0.90642683\n 0.59240588 0.8643601  0.45993872 0.96243078 0.56511522 0.88322526\n 0.98992417 0.00597593 0.55550726 0.19979239 0.90062773 0.84657695\n 0.96436855 0.03375009 0.34428985 0.54191328 0.67693687 0.81460587\n 0.30590164 0.39907677 0.73545432 0.56768856 0.26844794 0.78549411\n 0.06020346 0.63806449 0.76347271 0.89276656 0.72407304 0.15397659\n 0.35789549 0.46641842 0.58988864 0.86842092 0.80445417 0.54725703\n 0.48183308 0.68513887 0.24797944 0.44857785 0.52156459 0.77294949\n 0.22528635 0.23579403]\n\n\n\nsamples_our_prng = prng.uniform(0, 1, 1000)\n\n\nplt.hist(samples_our_prng)\n\n(array([ 96.,  94., 101.,  98.,  92.,  97., 107., 129.,  81., 105.]),\n array([0.00156537, 0.10117911, 0.20079286, 0.30040661, 0.40002035,\n        0.4996341 , 0.59924785, 0.69886159, 0.79847534, 0.89808909,\n        0.99770283]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "questions.html",
    "href": "questions.html",
    "title": "Prerequisite",
    "section": "",
    "text": "Instructions:\n\nSolve the following questions to assess your understanding of Python basics, data structures, and statistics.\nCreate a single Juptyer notebook with solutions to all questions.\nInclude output for each code cell.\nAdd explanations and comments to your code where necessary using Markdown cells.\nDO NOT cheat or copy solutions from the internet. The purpose of this exercise is to evaluate your current knowledge and skills and to help you prepare for the course.\n\n\n\n\nList Operations and Basic Statistics:\n\nCreate a list of the first 20 natural numbers.\nCompute the sum of all even numbers in the list.\nCompute the product of all odd numbers in the list.\nCalculate the mean, median, and standard deviation of the list.\n\nMutable vs. Immutable Data Types:\n\nExplain the difference between mutable and immutable data types in Python. Provide examples of each.\n\nFibonacci Sequence:\n\nWrite a Python function that takes a number n and returns a list of the first n Fibonacci numbers.\nPlot the Fibonacci sequence using a line graph.\n\nList Manipulation:\n\nGiven a list [3, 5, 7, 9, 11, 13]:\n\nInsert 6 at the 3rd index.\nRemove the number 7 from the list.\nReverse the list.\nCalculate the mean and median of the modified list.\n\n\nUser Input and Basic Statistics:\n\nWrite a program to read a comma-separated list of numbers from the user (e.g., “10, 20, 30, 40”).\nCalculate the mean of the numbers.\nIdentify and print the smallest and largest numbers.\nPlot a histogram of the numbers.\n\nPalindrome Check:\n\nWrite a program to check if a string is a palindrome (ignoring spaces and case).\nInput: \"A man a plan a canal Panama\"\nOutput: True\n\nDictionary Operations:\n\nCreate a dictionary of student names (keys) and their marks (values).\nCompute the average marks.\nPrint the names of students scoring above the average.\nVisualize the distribution of marks using a bar chart.\n\nTuple List Creation:\n\nCreate a list of tuples, where each tuple contains a number and its square (e.g., [(1, 1), (2, 4), (3, 9), ...] for numbers 1 to 10).\nPlot the numbers and their squares on a scatter plot.\n\nMerging Dictionaries:\n\nWrite Python code to merge two dictionaries. If a key is present in both, sum their values.\nExample:\ndict1 = {'a': 10, 'b': 20}\ndict2 = {'b': 5, 'c': 15}\nOutput: {'a': 10, 'b': 25, 'c': 15}\n\nCharacter Frequency:\n\nWrite a function that accepts a string and:\n\nConverts all characters to lowercase.\nCounts the frequency of each character.\nReturns a dictionary with characters as keys and their counts as values.\nVisualize the character frequencies using a bar chart.\n\n\nRemove Duplicates:\n\nWrite a program to remove duplicate elements from a list while maintaining the order of elements.\nCalculate the mean and median of the unique elements.\n\nString Operations:\n\nGiven a list of strings, write a Python function to:\n\nFind the longest string.\nCount how many strings start with a vowel.\nVisualize the distribution of string lengths using a histogram.\n\n\nSorting Dictionaries:\n\nWrite a function to sort a list of dictionaries by a key.\nExample:\ndata = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 22}]\nSort by age → [{'name': 'Bob', 'age': 22}, {'name': 'Alice', 'age': 25}]\n\nWord Filtering and Sorting:\n\nWrite a program to:\n\nSplit a string into a list of words.\nRemove all words that are shorter than 4 characters.\nSort the remaining words alphabetically.\nVisualize the word lengths using a bar chart.\n\n\nAnagram Finder:\n\nWrite a Python function to find all anagrams of a word in a given list.\nInput: word = \"listen\", words = [\"enlist\", \"google\", \"inlets\", \"banana\"]\nOutput: [\"enlist\", \"inlets\"]\n\nSet Operations:\n\nGiven two lists, write Python code to find their intersection, union, and symmetric difference.\nVisualize the results using Venn diagrams.\n\nFile Operations:\n\nWrite Python code to:\n\nCreate a text file.\nWrite a list of numbers to the file (one per line).\nRead the file and compute their sum.\n\n\nWord Count and Frequency:\n\nWrite a program to:\n\nRead a file and count the number of words in it.\nFind the most frequent word.\nVisualize the word frequencies using a bar chart.\n\n\nRandom Number Generation:\n\nWrite a Python program to:\n\nGenerate 100 random integers between 1 and 50.\nSave them in a text file, one per line.\nRead the file and compute the mean of the numbers.\nVisualize the distribution of the numbers using a histogram.\n\n\nCSV File Operations:\n\nWrite Python code to read a CSV file and compute the sum of values in a specific column.\nVisualize the data using a line plot.\n\nBasic Statistics:\n\nWrite Python code to calculate:\n\nMean, median, mode, and standard deviation of a list of numbers.\nVisualize the data using a box plot.\n\n\nNormalization:\n\nWrite a Python function to normalize a list of numbers to a range of 0 to 1.\nVisualize the normalized data using a line plot.\n\nEven or Odd:\n\nWrite a Python program that takes an integer input from the user and prints whether the number is even or odd.\n\nGrade Calculator:\n\nWrite a Python program that takes a numerical grade (0-100) as input and prints the corresponding letter grade (A, B, C, D, F).\n\nLeap Year Checker:\n\nWrite a Python program that takes a year as input and checks if it is a leap year."
  },
  {
    "objectID": "questions.html#python-basics-lists-strings-dictionaries-file-handling-statistics-and-flow-control",
    "href": "questions.html#python-basics-lists-strings-dictionaries-file-handling-statistics-and-flow-control",
    "title": "Prerequisite",
    "section": "",
    "text": "List Operations and Basic Statistics:\n\nCreate a list of the first 20 natural numbers.\nCompute the sum of all even numbers in the list.\nCompute the product of all odd numbers in the list.\nCalculate the mean, median, and standard deviation of the list.\n\nMutable vs. Immutable Data Types:\n\nExplain the difference between mutable and immutable data types in Python. Provide examples of each.\n\nFibonacci Sequence:\n\nWrite a Python function that takes a number n and returns a list of the first n Fibonacci numbers.\nPlot the Fibonacci sequence using a line graph.\n\nList Manipulation:\n\nGiven a list [3, 5, 7, 9, 11, 13]:\n\nInsert 6 at the 3rd index.\nRemove the number 7 from the list.\nReverse the list.\nCalculate the mean and median of the modified list.\n\n\nUser Input and Basic Statistics:\n\nWrite a program to read a comma-separated list of numbers from the user (e.g., “10, 20, 30, 40”).\nCalculate the mean of the numbers.\nIdentify and print the smallest and largest numbers.\nPlot a histogram of the numbers.\n\nPalindrome Check:\n\nWrite a program to check if a string is a palindrome (ignoring spaces and case).\nInput: \"A man a plan a canal Panama\"\nOutput: True\n\nDictionary Operations:\n\nCreate a dictionary of student names (keys) and their marks (values).\nCompute the average marks.\nPrint the names of students scoring above the average.\nVisualize the distribution of marks using a bar chart.\n\nTuple List Creation:\n\nCreate a list of tuples, where each tuple contains a number and its square (e.g., [(1, 1), (2, 4), (3, 9), ...] for numbers 1 to 10).\nPlot the numbers and their squares on a scatter plot.\n\nMerging Dictionaries:\n\nWrite Python code to merge two dictionaries. If a key is present in both, sum their values.\nExample:\ndict1 = {'a': 10, 'b': 20}\ndict2 = {'b': 5, 'c': 15}\nOutput: {'a': 10, 'b': 25, 'c': 15}\n\nCharacter Frequency:\n\nWrite a function that accepts a string and:\n\nConverts all characters to lowercase.\nCounts the frequency of each character.\nReturns a dictionary with characters as keys and their counts as values.\nVisualize the character frequencies using a bar chart.\n\n\nRemove Duplicates:\n\nWrite a program to remove duplicate elements from a list while maintaining the order of elements.\nCalculate the mean and median of the unique elements.\n\nString Operations:\n\nGiven a list of strings, write a Python function to:\n\nFind the longest string.\nCount how many strings start with a vowel.\nVisualize the distribution of string lengths using a histogram.\n\n\nSorting Dictionaries:\n\nWrite a function to sort a list of dictionaries by a key.\nExample:\ndata = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 22}]\nSort by age → [{'name': 'Bob', 'age': 22}, {'name': 'Alice', 'age': 25}]\n\nWord Filtering and Sorting:\n\nWrite a program to:\n\nSplit a string into a list of words.\nRemove all words that are shorter than 4 characters.\nSort the remaining words alphabetically.\nVisualize the word lengths using a bar chart.\n\n\nAnagram Finder:\n\nWrite a Python function to find all anagrams of a word in a given list.\nInput: word = \"listen\", words = [\"enlist\", \"google\", \"inlets\", \"banana\"]\nOutput: [\"enlist\", \"inlets\"]\n\nSet Operations:\n\nGiven two lists, write Python code to find their intersection, union, and symmetric difference.\nVisualize the results using Venn diagrams.\n\nFile Operations:\n\nWrite Python code to:\n\nCreate a text file.\nWrite a list of numbers to the file (one per line).\nRead the file and compute their sum.\n\n\nWord Count and Frequency:\n\nWrite a program to:\n\nRead a file and count the number of words in it.\nFind the most frequent word.\nVisualize the word frequencies using a bar chart.\n\n\nRandom Number Generation:\n\nWrite a Python program to:\n\nGenerate 100 random integers between 1 and 50.\nSave them in a text file, one per line.\nRead the file and compute the mean of the numbers.\nVisualize the distribution of the numbers using a histogram.\n\n\nCSV File Operations:\n\nWrite Python code to read a CSV file and compute the sum of values in a specific column.\nVisualize the data using a line plot.\n\nBasic Statistics:\n\nWrite Python code to calculate:\n\nMean, median, mode, and standard deviation of a list of numbers.\nVisualize the data using a box plot.\n\n\nNormalization:\n\nWrite a Python function to normalize a list of numbers to a range of 0 to 1.\nVisualize the normalized data using a line plot.\n\nEven or Odd:\n\nWrite a Python program that takes an integer input from the user and prints whether the number is even or odd.\n\nGrade Calculator:\n\nWrite a Python program that takes a numerical grade (0-100) as input and prints the corresponding letter grade (A, B, C, D, F).\n\nLeap Year Checker:\n\nWrite a Python program that takes a year as input and checks if it is a leap year."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This webpage contains the course materials for the course “PSDV” that I (Nipun Batra) teach at Indian Institute of Technology, Gandhinagar. These materials have been developed over several years by me and excellent teaching assistants who have helped me in teaching this course."
  },
  {
    "objectID": "notebooks/set.html",
    "href": "notebooks/set.html",
    "title": "Set",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport numpy as np\nimport torch \nimport pandas as pd\n# Retina mode\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nSet_A = set([1,2,3,4,5,6,7,8,9,10])\nSet_B = set([2,4,6,8,10])\n\n# Union\nUnion = Set_A.union(Set_B)\nprint('Union:', Union)\n\nUnion: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n\n\n# Intersection\nIntersection = Set_A.intersection(Set_B)\nprint('Intersection:', Intersection)\n\nIntersection: {2, 4, 6, 8, 10}\n\n\n\n# Difference\nDifference = Set_A.difference(Set_B)\nprint('Difference:', Difference)\n\nDifference: {1, 3, 5, 7, 9}\n\n\n\nSet_B.difference(Set_A)\n\nset()\n\n\n\nSet_A.issubset(Set_B)\n\nFalse\n\n\n\nSet_B.issubset(Set_A)\n\nTrue\n\n\n\ndef is_subset(set_a, set_b):\n    \"\"\"\n    set_a: set\n    set_b: set\n    ---\n    return: True if set_a is a subset of set_b, False otherwise\n    \"\"\"\n    assert isinstance(set_a, set), 'set_a must be a set'\n    assert isinstance(set_b, set), 'set_b must be a set'\n    \n    # Loop through all elements in set_a and check if they are in set_b\n    subset = True\n    for element in set_a:\n        if element in set_b:\n            continue\n        else:\n            subset = False\n            break\n    return subset\n\n\nis_subset(Set_A, Set_B)\n\nFalse\n\n\n\nis_subset(Set_B, Set_A)\n\nTrue\n\n\n\nSet and Mutability\nIn Python, sets require their elements to be hashable. This is because sets rely on hashing to determine membership and handle uniqueness. Hashable objects must meet two criteria:\n\nImmutability: The object should not change after it is created.\nDefined hash: The object must have a hash value, which is a unique identifier used by Python to store and compare the object in a set or dictionary.\n\nWhy Lists Cannot Be Used in Sets Lists are mutable (i.e., they can be changed after they are created). When you try to use a mutable object like a list as an element in a set, Python raises the TypeError: unhashable type: ‘list’ error. This happens because Python cannot guarantee that the contents of the list won’t change, which would affect its identity and make it unreliable as a key in a set.\n\nset_a = {1}\n\n\nli = [1, 2, 3, 4, 5]\nset_b = {li}\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[23], line 2\n      1 li = [1, 2, 3, 4, 5]\n----&gt; 2 set_b = {li}\n\nTypeError: unhashable type: 'list'\n\n\n\n\nset_c = frozenset(li)\nprint(set_c)\nli.append(6)\nprint(set_c)\n\nfrozenset({1, 2, 3, 4, 5})\nfrozenset({1, 2, 3, 4, 5})\n\n\n\n# List all subsets\noriginal_set = {\"R\", \"G\", \"B\"}\n\noriginal_list = list(original_set)\n\nsubsets = []\n\n\n# Subset of size 0\nsubsets.append([])\nprint(subsets)\n\n# Subset of size 1\nfor element in original_list:\n    subsets.append([element])\nprint(subsets)    \n\n# Subset of size 2\nfor i in range(len(original_list)):\n    for j in range(i+1, len(original_list)):\n        subsets.append([original_list[i], original_list[j]])\nprint(subsets)\n\n# Subset of size 3\nfor i in range(len(original_list)):\n    for j in range(i+1, len(original_list)):\n        for k in range(j+1, len(original_list)):\n            subsets.append([original_list[i], original_list[j], original_list[k]])\nprint(subsets)\n\n[[]]\n[[], ['B'], ['R'], ['G']]\n[[], ['B'], ['R'], ['G'], ['B', 'R'], ['B', 'G'], ['R', 'G']]\n[[], ['B'], ['R'], ['G'], ['B', 'R'], ['B', 'G'], ['R', 'G'], ['B', 'R', 'G']]\n\n\n\nall_subsets = {frozenset(subset) for subset in subsets}\nprint(all_subsets)\n\n{frozenset({'B', 'R', 'G'}), frozenset({'R'}), frozenset({'B', 'G'}), frozenset({'G'}), frozenset({'B', 'R'}), frozenset({'B'}), frozenset({'R', 'G'}), frozenset()}\n\n\n\n# Alternative way to list all subsets\nfrom itertools import combinations\n\noriginal_set = {\"R\", \"G\", \"B\"}\n\nsubsets = []\nfor i in range(len(original_set)+1):\n    subsets += list(combinations(original_set, i))\n    \nall_subsets = {frozenset(subset) for subset in subsets}\nprint(all_subsets)\n\n{frozenset({'B', 'R', 'G'}), frozenset({'R'}), frozenset({'B', 'G'}), frozenset({'G'}), frozenset({'B', 'R'}), frozenset({'B'}), frozenset({'R', 'G'}), frozenset()}\n\n\n\nbin(1)[2:].zfill(3), bin(2)[2:].zfill(3), bin(3)[2:].zfill(3)\n\n('001', '010', '011')\n\n\n\n# Enumerate via binary representation\nimport pandas as pd\noriginal_set = {\"R\", \"G\", \"B\"}\noriginal_list = list(original_set)\n\n# Binary representation of 0 to 2^3-1 in Pandas DataFrame\n\nn = len(original_set)\nbinary = [list(bin(i)[2:].zfill(n)) for i in range(2**n)]\nbinary_df = pd.DataFrame(binary, columns=original_list)\nbinary_df = binary_df.astype(int)\nprint(binary_df)\n\n   B  R  G\n0  0  0  0\n1  0  0  1\n2  0  1  0\n3  0  1  1\n4  1  0  0\n5  1  0  1\n6  1  1  0\n7  1  1  1\n\n\n\nbool_df = binary_df.astype(bool)\nbool_df\n\n\n\n\n\n\n\n\nB\nR\nG\n\n\n\n\n0\nFalse\nFalse\nFalse\n\n\n1\nFalse\nFalse\nTrue\n\n\n2\nFalse\nTrue\nFalse\n\n\n3\nFalse\nTrue\nTrue\n\n\n4\nTrue\nFalse\nFalse\n\n\n5\nTrue\nFalse\nTrue\n\n\n6\nTrue\nTrue\nFalse\n\n\n7\nTrue\nTrue\nTrue\n\n\n\n\n\n\n\n\n# Create subsets based on the boolean DataFrame\nsubsets = [np.array(original_list)[row] for row in bool_df.values]\n\n\nsubsets\n\n[array([], dtype='&lt;U1'),\n array(['G'], dtype='&lt;U1'),\n array(['R'], dtype='&lt;U1'),\n array(['R', 'G'], dtype='&lt;U1'),\n array(['B'], dtype='&lt;U1'),\n array(['B', 'G'], dtype='&lt;U1'),\n array(['B', 'R'], dtype='&lt;U1'),\n array(['B', 'R', 'G'], dtype='&lt;U1')]"
  },
  {
    "objectID": "notebooks/intro-numpy.html",
    "href": "notebooks/intro-numpy.html",
    "title": "Introduction to Numerical Computing with NumPy",
    "section": "",
    "text": "Heavily Inspired by Jake VanderPlas’s Python Data Science Handbook\n\n\nArray representation\n\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# config retina mode\n%config InlineBackend.figure_format = 'retina'\n\n\nimg_path = \"../datasets/images/street.jpg\"\nimg = Image.open(img_path)\n\n\nimg_array = np.array(img).astype(np.uint8)\n\n\nplt.imshow(img_array)\n# remove axis\n_ = plt.axis('off')\n\n\n\n\n\n\n\n\n\nimg_array\n\narray([[[ 48,  51,  56],\n        [ 41,  44,  49],\n        [ 31,  34,  39],\n        ...,\n        [153, 154, 149],\n        [129, 125, 116],\n        [120, 112, 101]],\n\n       [[ 47,  50,  55],\n        [ 41,  44,  49],\n        [ 30,  33,  38],\n        ...,\n        [151, 152, 147],\n        [126, 122, 113],\n        [117, 109,  98]],\n\n       [[ 46,  49,  54],\n        [ 39,  42,  47],\n        [ 29,  32,  37],\n        ...,\n        [147, 148, 143],\n        [121, 117, 108],\n        [113, 105,  94]],\n\n       ...,\n\n       [[ 80,  93,  99],\n        [ 85,  98, 104],\n        [ 91, 104, 110],\n        ...,\n        [ 83,  88,  92],\n        [ 85,  90,  94],\n        [ 88,  93,  97]],\n\n       [[ 69,  80,  86],\n        [ 75,  86,  92],\n        [ 82,  93,  99],\n        ...,\n        [ 86,  94,  97],\n        [ 86,  94,  97],\n        [ 87,  95,  98]],\n\n       [[ 58,  65,  75],\n        [ 64,  71,  81],\n        [ 73,  80,  90],\n        ...,\n        [ 90,  98, 101],\n        [ 88,  96,  99],\n        [ 88,  96,  99]]], dtype=uint8)\n\n\n\nimg_array.shape\n\n(2000, 3000, 3)\n\n\n\nimg_array.dtype\n\ndtype('uint8')\n\n\n\n# rotate image by 90 degrees\nrotated_img_array = np.rot90(img_array)\n\nplt.imshow(rotated_img_array.astype(np.uint8))\nplt.axis('off')\n\n\n\n\n\n\n\n\n\n# 0, 0 th pixel\nimg_array[0, 0]\n\narray([48, 51, 56], dtype=uint8)\n\n\n\n# Increase R value of first quarter to max\nnew_img = img_array.copy()\nnew_img[:new_img.shape[0]//2, :new_img.shape[1]//2, 0] = 255\n\nplt.imshow(new_img)\nplt.axis('off')\n\n\n\n\n\n\n\n\n\n%pip install pydub -q\n\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n# load audio\nfrom email.mime import audio\nfrom pydub import AudioSegment\naudio_path = \"../datasets/audio/pm-answer.mp3\"\n\n\naudio = AudioSegment.from_file(audio_path)\n\n\naudio\n\n\n                    \n                        \n                        Your browser does not support the audio element.\n                    \n                  \n\n\n\naudio_arr = np.array(audio.get_array_of_samples())\n\n\naudio_arr\n\narray([0, 0, 0, ..., 0, 0, 0], dtype=int16)\n\n\n\nplt.plot(audio_arr)\nplt.xlabel('Sample')\nplt.ylabel('Amplitude')\n\nText(0, 0.5, 'Amplitude')\n\n\n\n\n\n\n\n\n\n\naudio_arr.shape\n\n(82368,)\n\n\n\naudio.frame_rate\n\n24000\n\n\n\n# Convert plot to time as x-axis\ntime = np.linspace(0, len(audio_arr) / audio.frame_rate, num=len(audio_arr))\n\nplt.plot(time, audio_arr)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\n\nText(0, 0.5, 'Amplitude')\n\n\n\n\n\n\n\n\n\n\n# Add a smoothing effect\nfrom scipy.signal import savgol_filter\n\nsmoothed_audio_arr = savgol_filter(audio_arr, 51, 3)\n\nplt.plot(time, smoothed_audio_arr)\n\n\n\n\n\n\n\n\n\nfrom IPython.display import Audio\nAudio(audio_arr, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nAudio(smoothed_audio_arr, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Sample text data\ndocuments = [\n    \"The quick brown fox jumps over the lazy dog\",\n    \"Never jump over the lazy dog quickly\"\n]\n\n# Convert text to a bag-of-words representation\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(documents)\n\nprint(\"Feature names:\", vectorizer.get_feature_names_out())\nprint(\"Bag-of-words representation:\\n\", X.toarray())\n\nFeature names: ['brown' 'dog' 'fox' 'jump' 'jumps' 'lazy' 'never' 'over' 'quick'\n 'quickly' 'the']\nBag-of-words representation:\n [[1 1 1 0 1 1 0 1 1 0 2]\n [0 1 0 1 0 1 1 1 0 1 1]]\n\n\nWhy not use Python lists instead of NumPy arrays?\n\nimport time\n\nn_nums = 10000000\n# Using a Python list\nlst = list(range(n_nums))\nstart = time.time()\nlst_squared = [x**2 for x in lst]\nend = time.time()\nprint(f\"Python list computation time: {end - start: .2f} seconds\")\n\n# Using a NumPy array\narr = np.arange(n_nums)\nstart = time.time()\narr_squared = arr ** 2\nend = time.time()\nprint(f\"NumPy array computation time: {end - start: .2f} seconds\")\n\nPython list computation time:  0.21 seconds\nNumPy array computation time:  0.01 seconds\n\n\n\nImport & Version Check\n\nimport numpy as np\nprint(\"Using NumPy version:\", np.__version__)\n\nUsing NumPy version: 2.1.2\n\n\n\n\nCreating Arrays\nNumPy arrays can come from Python lists or built-in functions.\n\n# From a Python list\npy_list = [1, 2, 3, 4]\narr_from_list = np.array(py_list)\nprint(\"Array from list:\", arr_from_list)\n\nArray from list: [1 2 3 4]\n\n\n\nprint(py_list)\n\n[1, 2, 3, 4]\n\n\n\nprint(arr_from_list)\n\n[1 2 3 4]\n\n\n\ntype(py_list), type(arr_from_list)\n\n(list, numpy.ndarray)\n\n\n\npy_list = [0, 0, 0, 0, 0, 0, 0]\nnp.array(py_list)\n\nzeros_arr = np.zeros(7, dtype=np.int32)\nzeros_arr, py_list\n\n(array([0, 0, 0, 0, 0, 0, 0], dtype=int32), [0, 0, 0, 0, 0, 0, 0])\n\n\n\n# Using built-in functions\nzeros_arr = np.zeros((2, 3))\nprint(\"Zeros array:\\n\", zeros_arr)\n\nzeros_1d = np.zeros(3)\nprint(\"1D Zeros array:\", zeros_1d)\n\nZeros array:\n [[0. 0. 0.]\n [0. 0. 0.]]\n1D Zeros array: [0. 0. 0.]\n\n\n\nones_arr = np.ones((3, 2))\nprint(\"Ones array:\\n\", ones_arr)\n\nOnes array:\n [[1. 1.]\n [1. 1.]\n [1. 1.]]\n\n\n\nlist(range(0, 10, 2))\n\n[0, 2, 4, 6, 8]\n\n\n\nrange_arr = np.arange(0, 10, 2)\nprint(\"range_arr =\", range_arr)\n\nrange_arr = [0 2 4 6 8]\n\n\n\nnp.arange(0, 10, 2.5)\n\narray([0. , 2.5, 5. , 7.5])\n\n\n\ndef f(x):\n    return np.sin(x)\n\nx_range = np.arange(0, 2*np.pi, 0.001)\ny = f(x_range)\n\n\nx_range\n\narray([0.000e+00, 1.000e-03, 2.000e-03, ..., 6.281e+00, 6.282e+00,\n       6.283e+00])\n\n\n\nplt.plot(x_range, y)\n\n\n\n\n\n\n\n\n\nlinspace_arr = np.linspace(0, 1, 5)\nprint(\"linspace_arr =\", linspace_arr)\n\nlinspace_arr = [0.   0.25 0.5  0.75 1.  ]\n\n\n\nidentity_mat_arr = np.eye(3)\nprint(\"Identity matrix array:\\n\", identity_mat_arr)\n\nIdentity matrix array:\n [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n\n\n\n\nArray Attributes\nshape, size, ndim, and dtype are particularly important.\n\nrandom_arr = np.random.randint(1, 10, size=(3,4))\n\nprint(\"Array:\\n\", random_arr)\nprint(\"Shape:\", random_arr.shape)\nprint(\"Size:\", random_arr.size)\nprint(\"Dimensions:\", random_arr.ndim)\nprint(\"Data Type:\", random_arr.dtype)\n\nArray:\n [[1 1 2 8]\n [8 4 5 2]\n [3 2 9 8]]\nShape: (3, 4)\nSize: 12\nDimensions: 2\nData Type: int64\n\n\n\n\nTaking help\n? and . tab completion are useful for exploring the API.\n\nnp.zeros?\n\n\nDocstring:\nzeros(shape, dtype=float, order='C', *, like=None)\nReturn a new array of given shape and type, filled with zeros.\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n    .. versionadded:: 1.20.0\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\nExamples\n--------\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n&gt;&gt;&gt; np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n&gt;&gt;&gt; np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n&gt;&gt;&gt; s = (2,2)\n&gt;&gt;&gt; np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n&gt;&gt;&gt; np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '&lt;i4'), ('y', '&lt;i4')])\nType:      builtin_function_or_method\n\n\n\n\nhelp(np.zeros)\n\nHelp on built-in function zeros in module numpy:\n\nzeros(...)\n    zeros(shape, dtype=float, order='C', *, like=None)\n\n    Return a new array of given shape and type, filled with zeros.\n\n    Parameters\n    ----------\n    shape : int or tuple of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `numpy.int8`.  Default is\n        `numpy.float64`.\n    order : {'C', 'F'}, optional, default: 'C'\n        Whether to store multi-dimensional data in row-major\n        (C-style) or column-major (Fortran-style) order in\n        memory.\n    like : array_like, optional\n        Reference object to allow the creation of arrays which are not\n        NumPy arrays. If an array-like passed in as ``like`` supports\n        the ``__array_function__`` protocol, the result will be defined\n        by it. In this case, it ensures the creation of an array object\n        compatible with that passed in via this argument.\n\n        .. versionadded:: 1.20.0\n\n    Returns\n    -------\n    out : ndarray\n        Array of zeros with the given shape, dtype, and order.\n\n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty : Return a new uninitialized array.\n    ones : Return a new array setting values to one.\n    full : Return a new array of given shape filled with value.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; np.zeros(5)\n    array([ 0.,  0.,  0.,  0.,  0.])\n\n    &gt;&gt;&gt; np.zeros((5,), dtype=int)\n    array([0, 0, 0, 0, 0])\n\n    &gt;&gt;&gt; np.zeros((2, 1))\n    array([[ 0.],\n           [ 0.]])\n\n    &gt;&gt;&gt; s = (2,2)\n    &gt;&gt;&gt; np.zeros(s)\n    array([[ 0.,  0.],\n           [ 0.,  0.]])\n\n    &gt;&gt;&gt; np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\n    array([(0, 0), (0, 0)],\n          dtype=[('x', '&lt;i4'), ('y', '&lt;i4')])\n\n\n\n\na = np.zeros((2, 3))\na.size\n\n6\n\n\n\n# Gotcha\n# Shape of (N,) v/s (N, 1)\n\na = np.zeros(3)\nprint(\"Shape of a:\", a.shape)\nprint(\"a:\", a)\n\nb = np.zeros((3, 1))\nprint(\"Shape of b:\", b.shape)\nprint(\"b:\\n\", b)\n\nc = np.zeros((1, 3))\nprint(\"Shape of c:\", c.shape)\nprint(\"c:\\n\", c)\n\nShape of a: (3,)\na: [0. 0. 0.]\nShape of b: (3, 1)\nb:\n [[0.]\n [0.]\n [0.]]\nShape of c: (1, 3)\nc:\n [[0. 0. 0.]]\n\n\nIn above code, “a” is a vector (1d array) and “b” is a matrix (2d array) with 3 rows and 1 column; “c” is a 2d array with 1 row and 3 columns.\n\n\nIndexing & Slicing\n\nIndexing for single elements: arr[r, c]\nSlicing for subarrays: arr[start:stop:step]\n\nRemember that slices in NumPy are views—changing a slice changes the original array.\n\n# Example array\nx = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\nprint(\"Original x:\\n\", x)\n\nOriginal x:\n [[10 20 30]\n [40 50 60]\n [70 80 90]]\n\n\n\n# Accessing a single element\n# If we want to select the second element of the first row, we need to specify row and column\nprint(\"Second element of the First Row:\", x[0, 1])\n\nSecond element of the First Row: 20\n\n\n\n# Note: We can also use x[0][1] to get the same result but it is less efficient because it first creates \n# an array containing the first row and then selects the element from that row.\n\nprint(\"Second element of the First Row:\", x[0][1])\n\nSecond element of the First Row: 20\n\n\n\nprint(\"x = \", x)\n# Slicing examples\nprint(\"x[:1] =\", x[:1])  # Slices up to the first row (row index 0)\nprint(\"x[1:] =\", x[1:])  # Starts slicing from the second row (row index 1)\nprint(\"x[::2] =\", x[::2])  # Selects every second row (row indices 0 and 2 in this case)\n\nx =  [[10 20 30]\n [40 50 60]\n [70 80 90]]\nx[:1] = [[10 20 30]]\nx[1:] = [[40 50 60]\n [70 80 90]]\nx[::2] = [[10 20 30]\n [70 80 90]]\n\n\n\nprint(\"x = \", x)\n# Slicing examples\nprint(\"x[:1] =\", x[:1, :])  # Slices up to the first row (row index 0)\nprint(\"x[1:] =\", x[1:, :])  # Starts slicing from the second row (row index 1)\nprint(\"x[::2] =\", x[::2, :])  # Selects every second row (row indices 0 and 2 in this case)\n\nx =  [[10 20 30]\n [40 50 60]\n [70 80 90]]\nx[:1] = [[10 20 30]]\nx[1:] = [[40 50 60]\n [70 80 90]]\nx[::2] = [[10 20 30]\n [70 80 90]]\n\n\n\n# Changing a view changes the original array\narr2d = np.random.randint(10, size=(4,5))\nprint(\"\\narr2d:\\n\", arr2d)\n\n\narr2d:\n [[6 8 0 8 6]\n [2 2 3 1 5]\n [7 9 0 0 8]\n [5 1 8 6 5]]\n\n\n\nsub = arr2d[:2, :3]\nprint(\"\\nSubarray:\", sub)\n\n\nSubarray: [[6 8 0]\n [2 2 3]]\n\n\n\nsub[0,0] = 99\nprint(\"\\nChanged subarray =&gt; arr2d:\")\nprint(arr2d)\n\n\nChanged subarray =&gt; arr2d:\n[[99  8  0  8  6]\n [ 2  2  3  1  5]\n [ 7  9  0  0  8]\n [ 5  1  8  6  5]]\n\n\n\n# Create a copy of the array and then change the value\n\narr2d = np.random.randint(10, size=(4,5))\n\nprint(\"\\narr2d:\\n\", arr2d)\n\narr2d_copy = arr2d[:2, :3].copy()\nprint(\"\\nCopy of subarray:\", arr2d_copy)\n\narr2d_copy[0,0] = 99\n\nprint(\"\\nChanged copy of subarray \")\nprint(arr2d_copy)\n\nprint(\"\\nSame original array =&gt; arr2d:\")\nprint(arr2d)\n\n\narr2d:\n [[5 1 8 0 0]\n [0 1 4 6 3]\n [3 8 6 9 6]\n [3 5 2 8 3]]\n\nCopy of subarray: [[5 1 8]\n [0 1 4]]\n\nChanged copy of subarray \n[[99  1  8]\n [ 0  1  4]]\n\nSame original array =&gt; arr2d:\n[[5 1 8 0 0]\n [0 1 4 6 3]\n [3 8 6 9 6]\n [3 5 2 8 3]]\n\n\n\nprint(audio_arr), print(audio_arr.shape)\nAudio(audio_arr, rate=audio.frame_rate)\n\n[0 0 0 ... 0 0 0]\n(82368,)\n\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\n# Get last 2 seconds of audio\nlast_2_seconds = audio_arr[-2 * audio.frame_rate:]\nAudio(last_2_seconds, rate=audio.frame_rate)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\n\nReshaping\nUse reshape to change the shape without altering data.\n\ngrid = np.arange(1, 10)\nprint(\"Array, shape, dimensions:\")\nprint(grid, grid.shape, grid.ndim)\n\nArray, shape, dimensions:\n[1 2 3 4 5 6 7 8 9] (9,) 1\n\n\n\ngrid_3x3 = grid.reshape((3,3))\nprint(\"\\nArray, shape, dimensions:\")\nprint(grid_3x3, grid_3x3.shape, grid_3x3.ndim)\n\n\nArray, shape, dimensions:\n[[1 2 3]\n [4 5 6]\n [7 8 9]] (3, 3) 2\n\n\n\ngrid_temp = grid.reshape((1, 3,3))\nprint(\"\\nArray, shape, dimensions:\")\nprint(grid_temp, grid_temp.shape, grid_temp.ndim)\n\n\nArray, shape, dimensions:\n[[[1 2 3]\n  [4 5 6]\n  [7 8 9]]] (1, 3, 3) 3\n\n\n\ngrid.reshape((2, 5))\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[60], line 1\n----&gt; 1 grid.reshape((2, 5))\n\nValueError: cannot reshape array of size 9 into shape (2,5)\n\n\n\n\n# Example usage \n\nrandom_2d_img = np.random.randint(0, 255, size=(28, 28))\nplt.imshow(random_2d_img, cmap='gray')\nprint(random_2d_img.shape)\n\n(28, 28)\n\n\n\n\n\n\n\n\n\n\n# Flatten the 2D image to 1D\nflattened_img = random_2d_img.flatten()\nprint(\"Flattened image shape:\", flattened_img.shape)\n\nFlattened image shape: (784,)\n\n\n\nN = flattened_img.size\nflattened_img_using_reshape = random_2d_img.reshape(N)\n\nprint(\"Flattened image using reshape:\", flattened_img_using_reshape.shape)\n\nFlattened image using reshape: (784,)\n\n\n\n# Using -1 in reshape\nflattened_img_using_reshape = random_2d_img.reshape(-1)\n\nprint(\"Flattened image using reshape with -1:\", flattened_img_using_reshape.shape)\n\nFlattened image using reshape with -1: (784,)\n\n\n\nflattened_img.shape\n\n(784,)\n\n\n\n# Using -1 in reshape in one dimension\n\ntwo_d_img_1= flattened_img.reshape(28, -1)\nprint(\"2D image shape:\", two_d_img_1.shape)\n\ntwo_d_img_2 = flattened_img.reshape(-1, 28)\nprint(\"2D image shape:\", two_d_img_2.shape)\n\n# Check if two arrays are equal\nnp.all(two_d_img_1 == two_d_img_2)\n\n2D image shape: (28, 28)\n2D image shape: (28, 28)\n\n\nnp.True_\n\n\n\n\nConcatenation\nnp.concatenate, np.vstack, and np.hstack can help combine arrays.\n\narrA = np.array([1, 2, 3])\narrB = np.array([4, 5, 6])\nprint(\"Concatenate:\", np.concatenate([arrA, arrB]))\n\ngridA = np.array([[1,2],[3,4]])\ngridB = np.array([[5,6],[7,8]])\nprint(\"\\nVStack:\\n\", np.vstack([gridA, gridB]))\nprint(\"\\nHStack:\\n\", np.hstack([gridA, gridB]))\n\nConcatenate: [1 2 3 4 5 6]\n\nVStack:\n [[1 2]\n [3 4]\n [5 6]\n [7 8]]\n\nHStack:\n [[1 2 5 6]\n [3 4 7 8]]\n\n\n\n\nUniversal Functions (Ufuncs)\nUfuncs are vectorized, element-by-element functions that allow fast operations on entire arrays without explicit Python loops. Each arithmetic operator (+, -, *, /, etc.) in NumPy is backed by a ufunc, and there are many more specialized ufuncs for math, stats, etc.\n\n# Create a simple array\nx = np.arange(5)\nprint(\"x:\", x)\n\n# Perform elementwise operations via ufuncs\ny = x * 2      # multiplication\nz = np.exp(x)  # exponential\nprint(\"y = x * 2:\", y)\nprint(\"z = np.exp(x):\", z)\n\nx: [0 1 2 3 4]\ny = x * 2: [0 2 4 6 8]\nz = np.exp(x): [ 1.          2.71828183  7.3890561  20.08553692 54.59815003]\n\n\n\nx_list = range(5)\nmul_two = [x*2 for x in x_list]\nprint(mul_two)\n\n[0, 2, 4, 6, 8]\n\n\n\n\nAggregations\nAggregations summarize array values into a single numeric result (or one result per axis). Common examples include minimum, maximum, sum, mean, median, standard deviation, etc.\n\ndata = np.random.randint(1, 100, size=10)\nprint(\"data:\", data)\n\n# Basic aggregations\nprint(\"Sum:\", np.sum(data))\nprint(\"Min:\", np.min(data))\nprint(\"Max:\", np.max(data))\nprint(\"Mean:\", np.mean(data))\nprint(\"Standard Deviation:\", np.std(data))\n\n\nmatrix = np.random.randint(0, 10, size=(3,4))\nprint(\"matrix:\\n\", matrix)\n\nprint(\"Min of each column:\", np.min(matrix, axis=0))\nprint(\"Max of each row:\", np.max(matrix, axis=1))\n\ndata: [38 61  9 74  1  5 60 77 71 94]\nSum: 490\nMin: 1\nMax: 94\nMean: 49.0\nStandard Deviation: 31.849646779831012\nmatrix:\n [[7 1 2 5]\n [7 3 5 5]\n [9 6 1 8]]\nMin of each column: [7 1 1 5]\nMax of each row: [7 7 9]\n\n\n\n\nBroadcasting\nAllows operations on arrays of different shapes by stretching dimensions when possible.\nSee this nice video\n\na = np.array([1.0, 2.0, 3.0])\nb = np.array([2.0, 2.0, 2.0])\n\nc = a*b\nprint(\"c = a*b:\", c)\nprint(c.shape)\n\nc = a*b: [2. 4. 6.]\n(3,)\n\n\n\nscalar = 2.0\nd = a * scalar\n\nprint(\"d = a * scalar:\", d)\nprint(d.shape)\n\nd = a * scalar: [2. 4. 6.]\n(3,)\n\n\n\nX = np.array([[2, 6, 8], [4, 5, 3]])\nprint(X.shape)\n\nY = np.array([[2], [1]])\nprint(Y.shape)\n\nZ = X + Y\nprint(Z.shape)\n\n(2, 3)\n(2, 1)\n(2, 3)\n\n\n\nReference: https://numpy.org/doc/stable/user/basics.broadcasting.html\n\na = np.array([[ 0.0,  0.0,  0.0],\n              [10.0, 10.0, 10.0],\n              [20.0, 20.0, 20.0],\n              [30.0, 30.0, 30.0]])\nb = np.array([1.0, 2.0, 3.0])\nprint(a)\nprint(b)\n\n# Broadcasting \nprint(\"a + b:\\n\", a + b)    \n\n[[ 0.  0.  0.]\n [10. 10. 10.]\n [20. 20. 20.]\n [30. 30. 30.]]\n[1. 2. 3.]\na + b:\n [[ 1.  2.  3.]\n [11. 12. 13.]\n [21. 22. 23.]\n [31. 32. 33.]]\n\n\n\n\nBoolean Masks\nCreate a mask to select certain elements.\n\ndata = np.random.randint(1, 20, size=10)\nmask = data &gt; 10\nprint(\"data:\", data)\nprint(\"mask:\", mask)\nprint(\"Values &gt; 10:\", data[mask])\n\ndata: [12  8 14  5 10 13  4 14  2  1]\nmask: [ True False  True False False  True False  True False False]\nValues &gt; 10: [12 14 13 14]\n\n\n\n\nSorting & Partitioning\n\nnp.sort(arr) returns a sorted copy.\narr.sort() sorts in-place.\nnp.argsort returns the indices.\n\n\nunsorted_arr = np.array([2,1,4,3,5])\nprint(\"Sorted copy:\", np.sort(unsorted_arr))\nprint(\"Original:\", unsorted_arr)\n\nunsorted_arr.sort()\nprint(\"In-place sort:\", unsorted_arr)\n\nSorted copy: [1 2 3 4 5]\nOriginal: [2 1 4 3 5]\nIn-place sort: [1 2 3 4 5]\n\n\n\n\nAcknowledgments\nShreyans Jain, BTech IIT Gandhinagar for creating the first version of this notebook."
  }
]